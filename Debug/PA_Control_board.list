
PA_Control_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003640  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080037d0  080037d0  000137d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003830  08003830  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003830  08003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003838  08003838  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000013c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ac  200001ac  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c3ba  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a59  00000000  00000000  0002c45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  0002deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a08  00000000  00000000  0002e950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f7f  00000000  00000000  0002f358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1ce  00000000  00000000  000502d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7964  00000000  00000000  0005d4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00124e09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003020  00000000  00000000  00124e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037b8 	.word	0x080037b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080037b8 	.word	0x080037b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <DelayMicro>:
char str1[100];
uint8_t portlcd;


__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	micros *=(SystemCoreClock / 1000000) / 5;
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <DelayMicro+0x38>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <DelayMicro+0x3c>)
 8000582:	fba2 2303 	umull	r2, r3, r2, r3
 8000586:	0d5b      	lsrs	r3, r3, #21
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	fb02 f303 	mul.w	r3, r2, r3
 800058e:	607b      	str	r3, [r7, #4]
	while (micros--);
 8000590:	bf00      	nop
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1fa      	bne.n	8000592 <DelayMicro+0x1e>
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000000 	.word	0x20000000
 80005b0:	6b5fca6b 	.word	0x6b5fca6b

080005b4 <LCD_WriteByteI2CLCD>:

void LCD_WriteByteI2CLCD(uint8_t bt)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
	buf[0]=bt;
 80005be:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <LCD_WriteByteI2CLCD+0x2c>)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) 0x4E,buf,1,1000);
 80005c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <LCD_WriteByteI2CLCD+0x2c>)
 80005ce:	214e      	movs	r1, #78	; 0x4e
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <LCD_WriteByteI2CLCD+0x30>)
 80005d2:	f001 f99b 	bl	800190c <HAL_I2C_Master_Transmit>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000008c 	.word	0x2000008c
 80005e4:	200000b8 	.word	0x200000b8

080005e8 <sendhalfbyte>:

void sendhalfbyte(uint8_t c)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	c<<=4;
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	011b      	lsls	r3, r3, #4
 80005f6:	71fb      	strb	r3, [r7, #7]
	e_set();
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <sendhalfbyte+0x64>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <sendhalfbyte+0x64>)
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <sendhalfbyte+0x64>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ffd2 	bl	80005b4 <LCD_WriteByteI2CLCD>
	DelayMicro(50);
 8000610:	2032      	movs	r0, #50	; 0x32
 8000612:	f7ff ffaf 	bl	8000574 <DelayMicro>
	LCD_WriteByteI2CLCD(portlcd|c);
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <sendhalfbyte+0x64>)
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4313      	orrs	r3, r2
 800061e:	b2db      	uxtb	r3, r3
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ffc7 	bl	80005b4 <LCD_WriteByteI2CLCD>
	e_reset();
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <sendhalfbyte+0x64>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	f023 0304 	bic.w	r3, r3, #4
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <sendhalfbyte+0x64>)
 8000632:	701a      	strb	r2, [r3, #0]
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <sendhalfbyte+0x64>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffbb 	bl	80005b4 <LCD_WriteByteI2CLCD>
	DelayMicro(50);
 800063e:	2032      	movs	r0, #50	; 0x32
 8000640:	f7ff ff98 	bl	8000574 <DelayMicro>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000008d 	.word	0x2000008d

08000650 <sendbyte>:

void sendbyte(uint8_t c, uint8_t mode)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	460a      	mov	r2, r1
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	4613      	mov	r3, r2
 800065e:	71bb      	strb	r3, [r7, #6]
	if(mode==0) rs_reset();
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d10c      	bne.n	8000680 <sendbyte+0x30>
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <sendbyte+0x6c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	f023 0301 	bic.w	r3, r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <sendbyte+0x6c>)
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <sendbyte+0x6c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff9b 	bl	80005b4 <LCD_WriteByteI2CLCD>
 800067e:	e00b      	b.n	8000698 <sendbyte+0x48>
	else rs_set();
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <sendbyte+0x6c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <sendbyte+0x6c>)
 800068c:	701a      	strb	r2, [r3, #0]
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <sendbyte+0x6c>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff8e 	bl	80005b4 <LCD_WriteByteI2CLCD>
	uint8_t hc=0;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
	hc=c>>4;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	091b      	lsrs	r3, r3, #4
 80006a0:	73fb      	strb	r3, [r7, #15]
	sendhalfbyte(hc);sendhalfbyte(c);
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff9f 	bl	80005e8 <sendhalfbyte>
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff9b 	bl	80005e8 <sendhalfbyte>
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000008d 	.word	0x2000008d

080006c0 <LCD_String>:
{
	sendbyte(ch,1);
}

void LCD_String(char* st)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]
	while(st[i]!=0)
 80006cc:	e00a      	b.n	80006e4 <LCD_String+0x24>
	{
		sendbyte(st[i],1);
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2101      	movs	r1, #1
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ffb9 	bl	8000650 <sendbyte>
		i++;
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3301      	adds	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
	while(st[i]!=0)
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1ee      	bne.n	80006ce <LCD_String+0xe>
	}
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <LCD_ini>:
			break;
	}
}

void LCD_ini(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	HAL_Delay(15);
 8000700:	200f      	movs	r0, #15
 8000702:	f000 fc1d 	bl	8000f40 <HAL_Delay>
	sendhalfbyte(0x03);
 8000706:	2003      	movs	r0, #3
 8000708:	f7ff ff6e 	bl	80005e8 <sendhalfbyte>
	HAL_Delay(4);
 800070c:	2004      	movs	r0, #4
 800070e:	f000 fc17 	bl	8000f40 <HAL_Delay>
	sendhalfbyte(0x03);
 8000712:	2003      	movs	r0, #3
 8000714:	f7ff ff68 	bl	80005e8 <sendhalfbyte>
	DelayMicro(100);
 8000718:	2064      	movs	r0, #100	; 0x64
 800071a:	f7ff ff2b 	bl	8000574 <DelayMicro>
	sendhalfbyte(0x03);
 800071e:	2003      	movs	r0, #3
 8000720:	f7ff ff62 	bl	80005e8 <sendhalfbyte>
	HAL_Delay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f000 fc0b 	bl	8000f40 <HAL_Delay>
	sendhalfbyte(0x02);
 800072a:	2002      	movs	r0, #2
 800072c:	f7ff ff5c 	bl	80005e8 <sendhalfbyte>
	HAL_Delay(1);
 8000730:	2001      	movs	r0, #1
 8000732:	f000 fc05 	bl	8000f40 <HAL_Delay>
	sendbyte(0x28,0);
 8000736:	2100      	movs	r1, #0
 8000738:	2028      	movs	r0, #40	; 0x28
 800073a:	f7ff ff89 	bl	8000650 <sendbyte>
	HAL_Delay(1);
 800073e:	2001      	movs	r0, #1
 8000740:	f000 fbfe 	bl	8000f40 <HAL_Delay>
	sendbyte(0x0C,0);
 8000744:	2100      	movs	r1, #0
 8000746:	200c      	movs	r0, #12
 8000748:	f7ff ff82 	bl	8000650 <sendbyte>
	HAL_Delay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f000 fbf7 	bl	8000f40 <HAL_Delay>
	sendbyte(0x01,0);
 8000752:	2100      	movs	r1, #0
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff ff7b 	bl	8000650 <sendbyte>
	HAL_Delay(2);
 800075a:	2002      	movs	r0, #2
 800075c:	f000 fbf0 	bl	8000f40 <HAL_Delay>
	sendbyte(0x06,0);
 8000760:	2100      	movs	r1, #0
 8000762:	2006      	movs	r0, #6
 8000764:	f7ff ff74 	bl	8000650 <sendbyte>
	HAL_Delay(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f000 fbe9 	bl	8000f40 <HAL_Delay>
	setled();
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <LCD_ini+0xa8>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <LCD_ini+0xa8>)
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <LCD_ini+0xa8>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff17 	bl	80005b4 <LCD_WriteByteI2CLCD>
	setwrite();
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <LCD_ini+0xa8>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	f023 0302 	bic.w	r3, r3, #2
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <LCD_ini+0xa8>)
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <LCD_ini+0xa8>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff0b 	bl	80005b4 <LCD_WriteByteI2CLCD>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000008d 	.word	0x2000008d

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09a      	sub	sp, #104	; 0x68
 80007ac:	af00      	add	r7, sp, #0
	char str[100];
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007ae:	f000 fb55 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 80007b2:	f000 f819 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007b6:	f000 f937 	bl	8000a28 <MX_GPIO_Init>
	MX_I2C1_Init();
 80007ba:	f000 f8b3 	bl	8000924 <MX_I2C1_Init>
	MX_CAN1_Init();
 80007be:	f000 f87b 	bl	80008b8 <MX_CAN1_Init>
	MX_USART1_UART_Init();
 80007c2:	f000 f8dd 	bl	8000980 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80007c6:	f000 f905 	bl	80009d4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	LCD_ini();
 80007ca:	f7ff ff97 	bl	80006fc <LCD_ini>
	sprintf(str,"PA_CONTROL_BOARD");
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4904      	ldr	r1, [pc, #16]	; (80007e4 <main+0x3c>)
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fb82 	bl	8002edc <siprintf>
	LCD_String(str);
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff70 	bl	80006c0 <LCD_String>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0x38>
 80007e2:	bf00      	nop
 80007e4:	080037d0 	.word	0x080037d0

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	; 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fb68 	bl	8002ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <SystemClock_Config+0xc8>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <SystemClock_Config+0xc8>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	; 0x40
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <SystemClock_Config+0xc8>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <SystemClock_Config+0xcc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a20      	ldr	r2, [pc, #128]	; (80008b4 <SystemClock_Config+0xcc>)
 8000832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <SystemClock_Config+0xcc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000844:	2301      	movs	r3, #1
 8000846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000858:	2306      	movs	r3, #6
 800085a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800085c:	23c0      	movs	r3, #192	; 0xc0
 800085e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000864:	2304      	movs	r3, #4
 8000866:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fb55 	bl	8001f1c <HAL_RCC_OscConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000878:	f000 f91a 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087c:	230f      	movs	r3, #15
 800087e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000880:	2302      	movs	r3, #2
 8000882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000884:	2390      	movs	r3, #144	; 0x90
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2101      	movs	r1, #1
 8000896:	4618      	mov	r0, r3
 8000898:	f001 fdb8 	bl	800240c <HAL_RCC_ClockConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008a2:	f000 f905 	bl	8000ab0 <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3750      	adds	r7, #80	; 0x50
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40007000 	.word	0x40007000

080008b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_CAN1_Init+0x64>)
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <MX_CAN1_Init+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_CAN1_Init+0x64>)
 80008c4:	2208      	movs	r2, #8
 80008c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_CAN1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_CAN1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_CAN1_Init+0x64>)
 80008d6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80008da:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_CAN1_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_CAN1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_CAN1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_CAN1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_CAN1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_CAN1_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_CAN1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_CAN1_Init+0x64>)
 8000908:	f000 fb3e 	bl	8000f88 <HAL_CAN_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000912:	f000 f8cd 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000090 	.word	0x20000090
 8000920:	40006400 	.word	0x40006400

08000924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_I2C1_Init+0x50>)
 800092a:	4a13      	ldr	r2, [pc, #76]	; (8000978 <MX_I2C1_Init+0x54>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2C1_Init+0x50>)
 8000930:	4a12      	ldr	r2, [pc, #72]	; (800097c <MX_I2C1_Init+0x58>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_I2C1_Init+0x50>)
 8000942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_I2C1_Init+0x50>)
 8000962:	f000 fe8f 	bl	8001684 <HAL_I2C_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800096c:	f000 f8a0 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200000b8 	.word	0x200000b8
 8000978:	40005400 	.word	0x40005400
 800097c:	00061a80 	.word	0x00061a80

08000980 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <MX_USART1_UART_Init+0x50>)
 8000988:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART1_UART_Init+0x4c>)
 80009b8:	f001 ff95 	bl	80028e6 <HAL_HalfDuplex_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009c2:	f000 f875 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000010c 	.word	0x2000010c
 80009d0:	40011000 	.word	0x40011000

080009d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_USART2_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	f001 ff1e 	bl	800284c <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f000 f84b 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000150 	.word	0x20000150
 8000a24:	40004400 	.word	0x40004400

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a16      	ldr	r2, [pc, #88]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_GPIO_Init+0x84>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <HAL_CAN_MspInit+0x84>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12b      	bne.n	8000b86 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_CAN_MspInit+0x88>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_CAN_MspInit+0x88>)
 8000b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_CAN_MspInit+0x88>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_CAN_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_CAN_MspInit+0x88>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_CAN_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b66:	2303      	movs	r3, #3
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b76:	2309      	movs	r3, #9
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_CAN_MspInit+0x8c>)
 8000b82:	f000 fbe3 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40006400 	.word	0x40006400
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020c00 	.word	0x40020c00

08000b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <HAL_I2C_MspInit+0x84>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d12b      	bne.n	8000c16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_I2C_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <HAL_I2C_MspInit+0x88>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_I2C_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bda:	23c0      	movs	r3, #192	; 0xc0
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bde:	2312      	movs	r3, #18
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bea:	2304      	movs	r3, #4
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <HAL_I2C_MspInit+0x8c>)
 8000bf6:	f000 fba9 	bl	800134c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_I2C_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_I2C_MspInit+0x88>)
 8000c04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_I2C_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	; 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40005400 	.word	0x40005400
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020400 	.word	0x40020400

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a32      	ldr	r2, [pc, #200]	; (8000d14 <HAL_UART_MspInit+0xe8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12d      	bne.n	8000caa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	4b31      	ldr	r3, [pc, #196]	; (8000d18 <HAL_UART_MspInit+0xec>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a30      	ldr	r2, [pc, #192]	; (8000d18 <HAL_UART_MspInit+0xec>)
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <HAL_UART_MspInit+0xec>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	61bb      	str	r3, [r7, #24]
 8000c68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <HAL_UART_MspInit+0xec>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a29      	ldr	r2, [pc, #164]	; (8000d18 <HAL_UART_MspInit+0xec>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <HAL_UART_MspInit+0xec>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8c:	2312      	movs	r3, #18
 8000c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	481e      	ldr	r0, [pc, #120]	; (8000d1c <HAL_UART_MspInit+0xf0>)
 8000ca4:	f000 fb52 	bl	800134c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca8:	e030      	b.n	8000d0c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <HAL_UART_MspInit+0xf4>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d12b      	bne.n	8000d0c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <HAL_UART_MspInit+0xec>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	4a16      	ldr	r2, [pc, #88]	; (8000d18 <HAL_UART_MspInit+0xec>)
 8000cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <HAL_UART_MspInit+0xec>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_UART_MspInit+0xec>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <HAL_UART_MspInit+0xec>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_UART_MspInit+0xec>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cec:	230c      	movs	r3, #12
 8000cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <HAL_UART_MspInit+0xf0>)
 8000d08:	f000 fb20 	bl	800134c <HAL_GPIO_Init>
}
 8000d0c:	bf00      	nop
 8000d0e:	3730      	adds	r7, #48	; 0x30
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40011000 	.word	0x40011000
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020000 	.word	0x40020000
 8000d20:	40004400 	.word	0x40004400

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <NMI_Handler+0x4>

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f8c6 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f002 f866 	bl	8002e78 <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20020000 	.word	0x20020000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	20000194 	.word	0x20000194
 8000de0:	200001b0 	.word	0x200001b0

08000de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e0e:	490e      	ldr	r1, [pc, #56]	; (8000e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e24:	4c0b      	ldr	r4, [pc, #44]	; (8000e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e32:	f7ff ffd7 	bl	8000de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e36:	f002 f825 	bl	8002e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3a:	f7ff fcb5 	bl	80007a8 <main>
  bx  lr    
 8000e3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e4c:	08003840 	.word	0x08003840
  ldr r2, =_sbss
 8000e50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e54:	200001ac 	.word	0x200001ac

08000e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <HAL_Init+0x40>)
 8000e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_Init+0x40>)
 8000e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <HAL_Init+0x40>)
 8000e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 fa2d 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f000 f808 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fe14 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023c00 	.word	0x40023c00

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fa37 	bl	8001332 <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 fa0d 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000198 	.word	0x20000198

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000198 	.word	0x20000198

08000f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff ffee 	bl	8000f28 <HAL_GetTick>
 8000f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f58:	d005      	beq.n	8000f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_Delay+0x44>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f66:	bf00      	nop
 8000f68:	f7ff ffde 	bl	8000f28 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d8f7      	bhi.n	8000f68 <HAL_Delay+0x28>
  {
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008

08000f88 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e0ed      	b.n	8001176 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d102      	bne.n	8000fac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff fdb0 	bl	8000b0c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0201 	orr.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fbc:	f7ff ffb4 	bl	8000f28 <HAL_GetTick>
 8000fc0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fc2:	e012      	b.n	8000fea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fc4:	f7ff ffb0 	bl	8000f28 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b0a      	cmp	r3, #10
 8000fd0:	d90b      	bls.n	8000fea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2205      	movs	r2, #5
 8000fe2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e0c5      	b.n	8001176 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0e5      	beq.n	8000fc4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0202 	bic.w	r2, r2, #2
 8001006:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001008:	f7ff ff8e 	bl	8000f28 <HAL_GetTick>
 800100c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800100e:	e012      	b.n	8001036 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001010:	f7ff ff8a 	bl	8000f28 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b0a      	cmp	r3, #10
 800101c:	d90b      	bls.n	8001036 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001022:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2205      	movs	r2, #5
 800102e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e09f      	b.n	8001176 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1e5      	bne.n	8001010 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7e1b      	ldrb	r3, [r3, #24]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d108      	bne.n	800105e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	e007      	b.n	800106e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7e5b      	ldrb	r3, [r3, #25]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d108      	bne.n	8001088 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	e007      	b.n	8001098 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001096:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7e9b      	ldrb	r3, [r3, #26]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d108      	bne.n	80010b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0220 	orr.w	r2, r2, #32
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	e007      	b.n	80010c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0220 	bic.w	r2, r2, #32
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7edb      	ldrb	r3, [r3, #27]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d108      	bne.n	80010dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0210 	bic.w	r2, r2, #16
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	e007      	b.n	80010ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0210 	orr.w	r2, r2, #16
 80010ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7f1b      	ldrb	r3, [r3, #28]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d108      	bne.n	8001106 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0208 	orr.w	r2, r2, #8
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	e007      	b.n	8001116 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0208 	bic.w	r2, r2, #8
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7f5b      	ldrb	r3, [r3, #29]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d108      	bne.n	8001130 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 0204 	orr.w	r2, r2, #4
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e007      	b.n	8001140 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0204 	bic.w	r2, r2, #4
 800113e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	431a      	orrs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	ea42 0103 	orr.w	r1, r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	1e5a      	subs	r2, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff47 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff5c 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ffb0 	bl	80012a0 <SysTick_Config>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e16b      	b.n	8001640 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001368:	2201      	movs	r2, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	429a      	cmp	r2, r3
 8001382:	f040 815a 	bne.w	800163a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d005      	beq.n	800139e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139a:	2b02      	cmp	r3, #2
 800139c:	d130      	bne.n	8001400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 0201 	and.w	r2, r3, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b03      	cmp	r3, #3
 800140a:	d017      	beq.n	800143c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d123      	bne.n	8001490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	08da      	lsrs	r2, r3, #3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3208      	adds	r2, #8
 8001450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	220f      	movs	r2, #15
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0203 	and.w	r2, r3, #3
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80b4 	beq.w	800163a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b60      	ldr	r3, [pc, #384]	; (8001658 <HAL_GPIO_Init+0x30c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a5f      	ldr	r2, [pc, #380]	; (8001658 <HAL_GPIO_Init+0x30c>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <HAL_GPIO_Init+0x30c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ee:	4a5b      	ldr	r2, [pc, #364]	; (800165c <HAL_GPIO_Init+0x310>)
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3302      	adds	r3, #2
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a52      	ldr	r2, [pc, #328]	; (8001660 <HAL_GPIO_Init+0x314>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d02b      	beq.n	8001572 <HAL_GPIO_Init+0x226>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a51      	ldr	r2, [pc, #324]	; (8001664 <HAL_GPIO_Init+0x318>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d025      	beq.n	800156e <HAL_GPIO_Init+0x222>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a50      	ldr	r2, [pc, #320]	; (8001668 <HAL_GPIO_Init+0x31c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d01f      	beq.n	800156a <HAL_GPIO_Init+0x21e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4f      	ldr	r2, [pc, #316]	; (800166c <HAL_GPIO_Init+0x320>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d019      	beq.n	8001566 <HAL_GPIO_Init+0x21a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4e      	ldr	r2, [pc, #312]	; (8001670 <HAL_GPIO_Init+0x324>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0x216>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4d      	ldr	r2, [pc, #308]	; (8001674 <HAL_GPIO_Init+0x328>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00d      	beq.n	800155e <HAL_GPIO_Init+0x212>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <HAL_GPIO_Init+0x32c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d007      	beq.n	800155a <HAL_GPIO_Init+0x20e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4b      	ldr	r2, [pc, #300]	; (800167c <HAL_GPIO_Init+0x330>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_GPIO_Init+0x20a>
 8001552:	2307      	movs	r3, #7
 8001554:	e00e      	b.n	8001574 <HAL_GPIO_Init+0x228>
 8001556:	2308      	movs	r3, #8
 8001558:	e00c      	b.n	8001574 <HAL_GPIO_Init+0x228>
 800155a:	2306      	movs	r3, #6
 800155c:	e00a      	b.n	8001574 <HAL_GPIO_Init+0x228>
 800155e:	2305      	movs	r3, #5
 8001560:	e008      	b.n	8001574 <HAL_GPIO_Init+0x228>
 8001562:	2304      	movs	r3, #4
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x228>
 8001566:	2303      	movs	r3, #3
 8001568:	e004      	b.n	8001574 <HAL_GPIO_Init+0x228>
 800156a:	2302      	movs	r3, #2
 800156c:	e002      	b.n	8001574 <HAL_GPIO_Init+0x228>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x228>
 8001572:	2300      	movs	r3, #0
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	f002 0203 	and.w	r2, r2, #3
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4093      	lsls	r3, r2
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001584:	4935      	ldr	r1, [pc, #212]	; (800165c <HAL_GPIO_Init+0x310>)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_GPIO_Init+0x334>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <HAL_GPIO_Init+0x334>)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015bc:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_GPIO_Init+0x334>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_GPIO_Init+0x334>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_GPIO_Init+0x334>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800160a:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <HAL_GPIO_Init+0x334>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_GPIO_Init+0x334>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001634:	4a12      	ldr	r2, [pc, #72]	; (8001680 <HAL_GPIO_Init+0x334>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3301      	adds	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	f67f ae90 	bls.w	8001368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	40013800 	.word	0x40013800
 8001660:	40020000 	.word	0x40020000
 8001664:	40020400 	.word	0x40020400
 8001668:	40020800 	.word	0x40020800
 800166c:	40020c00 	.word	0x40020c00
 8001670:	40021000 	.word	0x40021000
 8001674:	40021400 	.word	0x40021400
 8001678:	40021800 	.word	0x40021800
 800167c:	40021c00 	.word	0x40021c00
 8001680:	40013c00 	.word	0x40013c00

08001684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e12b      	b.n	80018ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fa76 	bl	8000b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2224      	movs	r2, #36	; 0x24
 80016b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016e8:	f001 f888 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 80016ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a81      	ldr	r2, [pc, #516]	; (80018f8 <HAL_I2C_Init+0x274>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d807      	bhi.n	8001708 <HAL_I2C_Init+0x84>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4a80      	ldr	r2, [pc, #512]	; (80018fc <HAL_I2C_Init+0x278>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	bf94      	ite	ls
 8001700:	2301      	movls	r3, #1
 8001702:	2300      	movhi	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	e006      	b.n	8001716 <HAL_I2C_Init+0x92>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4a7d      	ldr	r2, [pc, #500]	; (8001900 <HAL_I2C_Init+0x27c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	bf94      	ite	ls
 8001710:	2301      	movls	r3, #1
 8001712:	2300      	movhi	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0e7      	b.n	80018ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4a78      	ldr	r2, [pc, #480]	; (8001904 <HAL_I2C_Init+0x280>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9b      	lsrs	r3, r3, #18
 8001728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4a6a      	ldr	r2, [pc, #424]	; (80018f8 <HAL_I2C_Init+0x274>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d802      	bhi.n	8001758 <HAL_I2C_Init+0xd4>
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	3301      	adds	r3, #1
 8001756:	e009      	b.n	800176c <HAL_I2C_Init+0xe8>
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	4a69      	ldr	r2, [pc, #420]	; (8001908 <HAL_I2C_Init+0x284>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	3301      	adds	r3, #1
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	430b      	orrs	r3, r1
 8001772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800177e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	495c      	ldr	r1, [pc, #368]	; (80018f8 <HAL_I2C_Init+0x274>)
 8001788:	428b      	cmp	r3, r1
 800178a:	d819      	bhi.n	80017c0 <HAL_I2C_Init+0x13c>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1e59      	subs	r1, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fbb1 f3f3 	udiv	r3, r1, r3
 800179a:	1c59      	adds	r1, r3, #1
 800179c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017a0:	400b      	ands	r3, r1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00a      	beq.n	80017bc <HAL_I2C_Init+0x138>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1e59      	subs	r1, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b4:	3301      	adds	r3, #1
 80017b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ba:	e051      	b.n	8001860 <HAL_I2C_Init+0x1dc>
 80017bc:	2304      	movs	r3, #4
 80017be:	e04f      	b.n	8001860 <HAL_I2C_Init+0x1dc>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d111      	bne.n	80017ec <HAL_I2C_Init+0x168>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1e58      	subs	r0, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6859      	ldr	r1, [r3, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	440b      	add	r3, r1
 80017d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017da:	3301      	adds	r3, #1
 80017dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	bf0c      	ite	eq
 80017e4:	2301      	moveq	r3, #1
 80017e6:	2300      	movne	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	e012      	b.n	8001812 <HAL_I2C_Init+0x18e>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	1e58      	subs	r0, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6859      	ldr	r1, [r3, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	0099      	lsls	r1, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001802:	3301      	adds	r3, #1
 8001804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf0c      	ite	eq
 800180c:	2301      	moveq	r3, #1
 800180e:	2300      	movne	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_I2C_Init+0x196>
 8001816:	2301      	movs	r3, #1
 8001818:	e022      	b.n	8001860 <HAL_I2C_Init+0x1dc>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10e      	bne.n	8001840 <HAL_I2C_Init+0x1bc>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1e58      	subs	r0, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6859      	ldr	r1, [r3, #4]
 800182a:	460b      	mov	r3, r1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	440b      	add	r3, r1
 8001830:	fbb0 f3f3 	udiv	r3, r0, r3
 8001834:	3301      	adds	r3, #1
 8001836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183e:	e00f      	b.n	8001860 <HAL_I2C_Init+0x1dc>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1e58      	subs	r0, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	0099      	lsls	r1, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	fbb0 f3f3 	udiv	r3, r0, r3
 8001856:	3301      	adds	r3, #1
 8001858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800185c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	6809      	ldr	r1, [r1, #0]
 8001864:	4313      	orrs	r3, r2
 8001866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800188e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6911      	ldr	r1, [r2, #16]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68d2      	ldr	r2, [r2, #12]
 800189a:	4311      	orrs	r1, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0201 	orr.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2220      	movs	r2, #32
 80018da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	000186a0 	.word	0x000186a0
 80018fc:	001e847f 	.word	0x001e847f
 8001900:	003d08ff 	.word	0x003d08ff
 8001904:	431bde83 	.word	0x431bde83
 8001908:	10624dd3 	.word	0x10624dd3

0800190c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af02      	add	r7, sp, #8
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	461a      	mov	r2, r3
 8001918:	460b      	mov	r3, r1
 800191a:	817b      	strh	r3, [r7, #10]
 800191c:	4613      	mov	r3, r2
 800191e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff fb02 	bl	8000f28 <HAL_GetTick>
 8001924:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b20      	cmp	r3, #32
 8001930:	f040 80e0 	bne.w	8001af4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2319      	movs	r3, #25
 800193a:	2201      	movs	r2, #1
 800193c:	4970      	ldr	r1, [pc, #448]	; (8001b00 <HAL_I2C_Master_Transmit+0x1f4>)
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 f964 	bl	8001c0c <I2C_WaitOnFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800194a:	2302      	movs	r3, #2
 800194c:	e0d3      	b.n	8001af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_I2C_Master_Transmit+0x50>
 8001958:	2302      	movs	r3, #2
 800195a:	e0cc      	b.n	8001af6 <HAL_I2C_Master_Transmit+0x1ea>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b01      	cmp	r3, #1
 8001970:	d007      	beq.n	8001982 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0201 	orr.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001990:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2221      	movs	r2, #33	; 0x21
 8001996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2210      	movs	r2, #16
 800199e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	893a      	ldrh	r2, [r7, #8]
 80019b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4a50      	ldr	r2, [pc, #320]	; (8001b04 <HAL_I2C_Master_Transmit+0x1f8>)
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019c4:	8979      	ldrh	r1, [r7, #10]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	6a3a      	ldr	r2, [r7, #32]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 f89c 	bl	8001b08 <I2C_MasterRequestWrite>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e08d      	b.n	8001af6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019f0:	e066      	b.n	8001ac0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	6a39      	ldr	r1, [r7, #32]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 f9de 	bl	8001db8 <I2C_WaitOnTXEFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00d      	beq.n	8001a1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d107      	bne.n	8001a1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06b      	b.n	8001af6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d11b      	bne.n	8001a94 <HAL_I2C_Master_Transmit+0x188>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d017      	beq.n	8001a94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	781a      	ldrb	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	6a39      	ldr	r1, [r7, #32]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f9ce 	bl	8001e3a <I2C_WaitOnBTFFlagUntilTimeout>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00d      	beq.n	8001ac0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d107      	bne.n	8001abc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001aba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e01a      	b.n	8001af6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d194      	bne.n	80019f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e000      	b.n	8001af6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001af4:	2302      	movs	r3, #2
  }
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	00100002 	.word	0x00100002
 8001b04:	ffff0000 	.word	0xffff0000

08001b08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	460b      	mov	r3, r1
 8001b16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d006      	beq.n	8001b32 <I2C_MasterRequestWrite+0x2a>
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d003      	beq.n	8001b32 <I2C_MasterRequestWrite+0x2a>
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b30:	d108      	bne.n	8001b44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	e00b      	b.n	8001b5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	2b12      	cmp	r3, #18
 8001b4a:	d107      	bne.n	8001b5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 f84f 	bl	8001c0c <I2C_WaitOnFlagUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00d      	beq.n	8001b90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b82:	d103      	bne.n	8001b8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e035      	b.n	8001bfc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b98:	d108      	bne.n	8001bac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b9a:	897b      	ldrh	r3, [r7, #10]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	e01b      	b.n	8001be4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bac:	897b      	ldrh	r3, [r7, #10]
 8001bae:	11db      	asrs	r3, r3, #7
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f003 0306 	and.w	r3, r3, #6
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f063 030f 	orn	r3, r3, #15
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	490e      	ldr	r1, [pc, #56]	; (8001c04 <I2C_MasterRequestWrite+0xfc>)
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f875 	bl	8001cba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e010      	b.n	8001bfc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001bda:	897b      	ldrh	r3, [r7, #10]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4907      	ldr	r1, [pc, #28]	; (8001c08 <I2C_MasterRequestWrite+0x100>)
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f865 	bl	8001cba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	00010008 	.word	0x00010008
 8001c08:	00010002 	.word	0x00010002

08001c0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c1c:	e025      	b.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d021      	beq.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c26:	f7ff f97f 	bl	8000f28 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d302      	bcc.n	8001c3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d116      	bne.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f043 0220 	orr.w	r2, r3, #32
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e023      	b.n	8001cb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	0c1b      	lsrs	r3, r3, #16
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d10d      	bne.n	8001c90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	bf0c      	ite	eq
 8001c86:	2301      	moveq	r3, #1
 8001c88:	2300      	movne	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	e00c      	b.n	8001caa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	43da      	mvns	r2, r3
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	bf0c      	ite	eq
 8001ca2:	2301      	moveq	r3, #1
 8001ca4:	2300      	movne	r3, #0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d0b6      	beq.n	8001c1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cc8:	e051      	b.n	8001d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd8:	d123      	bne.n	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ce8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cf2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f043 0204 	orr.w	r2, r3, #4
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e046      	b.n	8001db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d28:	d021      	beq.n	8001d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d2a:	f7ff f8fd 	bl	8000f28 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d302      	bcc.n	8001d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d116      	bne.n	8001d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f043 0220 	orr.w	r2, r3, #32
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e020      	b.n	8001db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	0c1b      	lsrs	r3, r3, #16
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d10c      	bne.n	8001d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	4013      	ands	r3, r2
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	bf14      	ite	ne
 8001d8a:	2301      	movne	r3, #1
 8001d8c:	2300      	moveq	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	e00b      	b.n	8001daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf14      	ite	ne
 8001da4:	2301      	movne	r3, #1
 8001da6:	2300      	moveq	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d18d      	bne.n	8001cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dc4:	e02d      	b.n	8001e22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 f878 	bl	8001ebc <I2C_IsAcknowledgeFailed>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e02d      	b.n	8001e32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ddc:	d021      	beq.n	8001e22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dde:	f7ff f8a3 	bl	8000f28 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d302      	bcc.n	8001df4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d116      	bne.n	8001e22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f043 0220 	orr.w	r2, r3, #32
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e007      	b.n	8001e32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2c:	2b80      	cmp	r3, #128	; 0x80
 8001e2e:	d1ca      	bne.n	8001dc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e46:	e02d      	b.n	8001ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f837 	bl	8001ebc <I2C_IsAcknowledgeFailed>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e02d      	b.n	8001eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5e:	d021      	beq.n	8001ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e60:	f7ff f862 	bl	8000f28 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d302      	bcc.n	8001e76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f043 0220 	orr.w	r2, r3, #32
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e007      	b.n	8001eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f003 0304 	and.w	r3, r3, #4
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d1ca      	bne.n	8001e48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed2:	d11b      	bne.n	8001f0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001edc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f043 0204 	orr.w	r2, r3, #4
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e267      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d075      	beq.n	8002026 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f3a:	4b88      	ldr	r3, [pc, #544]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d00c      	beq.n	8001f60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f46:	4b85      	ldr	r3, [pc, #532]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d112      	bne.n	8001f78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f52:	4b82      	ldr	r3, [pc, #520]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f5e:	d10b      	bne.n	8001f78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	4b7e      	ldr	r3, [pc, #504]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d05b      	beq.n	8002024 <HAL_RCC_OscConfig+0x108>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d157      	bne.n	8002024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e242      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f80:	d106      	bne.n	8001f90 <HAL_RCC_OscConfig+0x74>
 8001f82:	4b76      	ldr	r3, [pc, #472]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a75      	ldr	r2, [pc, #468]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e01d      	b.n	8001fcc <HAL_RCC_OscConfig+0xb0>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x98>
 8001f9a:	4b70      	ldr	r3, [pc, #448]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a6f      	ldr	r2, [pc, #444]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b6d      	ldr	r3, [pc, #436]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6c      	ldr	r2, [pc, #432]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	e00b      	b.n	8001fcc <HAL_RCC_OscConfig+0xb0>
 8001fb4:	4b69      	ldr	r3, [pc, #420]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a68      	ldr	r2, [pc, #416]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b66      	ldr	r3, [pc, #408]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a65      	ldr	r2, [pc, #404]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d013      	beq.n	8001ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7fe ffa8 	bl	8000f28 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7fe ffa4 	bl	8000f28 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e207      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b5b      	ldr	r3, [pc, #364]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0xc0>
 8001ffa:	e014      	b.n	8002026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7fe ff94 	bl	8000f28 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002004:	f7fe ff90 	bl	8000f28 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	; 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1f3      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	4b51      	ldr	r3, [pc, #324]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0xe8>
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d063      	beq.n	80020fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002032:	4b4a      	ldr	r3, [pc, #296]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00b      	beq.n	8002056 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800203e:	4b47      	ldr	r3, [pc, #284]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002046:	2b08      	cmp	r3, #8
 8002048:	d11c      	bne.n	8002084 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800204a:	4b44      	ldr	r3, [pc, #272]	; (800215c <HAL_RCC_OscConfig+0x240>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d116      	bne.n	8002084 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002056:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_RCC_OscConfig+0x152>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e1c7      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206e:	4b3b      	ldr	r3, [pc, #236]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4937      	ldr	r1, [pc, #220]	; (800215c <HAL_RCC_OscConfig+0x240>)
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002082:	e03a      	b.n	80020fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208c:	4b34      	ldr	r3, [pc, #208]	; (8002160 <HAL_RCC_OscConfig+0x244>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7fe ff49 	bl	8000f28 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209a:	f7fe ff45 	bl	8000f28 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e1a8      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_RCC_OscConfig+0x240>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b8:	4b28      	ldr	r3, [pc, #160]	; (800215c <HAL_RCC_OscConfig+0x240>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4925      	ldr	r1, [pc, #148]	; (800215c <HAL_RCC_OscConfig+0x240>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]
 80020cc:	e015      	b.n	80020fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ce:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_RCC_OscConfig+0x244>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7fe ff28 	bl	8000f28 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020dc:	f7fe ff24 	bl	8000f28 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e187      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d036      	beq.n	8002174 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d016      	beq.n	800213c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_RCC_OscConfig+0x248>)
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7fe ff08 	bl	8000f28 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800211c:	f7fe ff04 	bl	8000f28 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e167      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_RCC_OscConfig+0x240>)
 8002130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x200>
 800213a:	e01b      	b.n	8002174 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_RCC_OscConfig+0x248>)
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002142:	f7fe fef1 	bl	8000f28 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002148:	e00e      	b.n	8002168 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214a:	f7fe feed 	bl	8000f28 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d907      	bls.n	8002168 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e150      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
 800215c:	40023800 	.word	0x40023800
 8002160:	42470000 	.word	0x42470000
 8002164:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002168:	4b88      	ldr	r3, [pc, #544]	; (800238c <HAL_RCC_OscConfig+0x470>)
 800216a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1ea      	bne.n	800214a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8097 	beq.w	80022b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002186:	4b81      	ldr	r3, [pc, #516]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10f      	bne.n	80021b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	4b7d      	ldr	r3, [pc, #500]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a7c      	ldr	r2, [pc, #496]	; (800238c <HAL_RCC_OscConfig+0x470>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b7a      	ldr	r3, [pc, #488]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b2:	4b77      	ldr	r3, [pc, #476]	; (8002390 <HAL_RCC_OscConfig+0x474>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d118      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021be:	4b74      	ldr	r3, [pc, #464]	; (8002390 <HAL_RCC_OscConfig+0x474>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a73      	ldr	r2, [pc, #460]	; (8002390 <HAL_RCC_OscConfig+0x474>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ca:	f7fe fead 	bl	8000f28 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7fe fea9 	bl	8000f28 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e10c      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <HAL_RCC_OscConfig+0x474>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x2ea>
 80021f8:	4b64      	ldr	r3, [pc, #400]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a63      	ldr	r2, [pc, #396]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	e01c      	b.n	8002240 <HAL_RCC_OscConfig+0x324>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2b05      	cmp	r3, #5
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x30c>
 800220e:	4b5f      	ldr	r3, [pc, #380]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a5e      	ldr	r2, [pc, #376]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002214:	f043 0304 	orr.w	r3, r3, #4
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	4b5c      	ldr	r3, [pc, #368]	; (800238c <HAL_RCC_OscConfig+0x470>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a5b      	ldr	r2, [pc, #364]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6713      	str	r3, [r2, #112]	; 0x70
 8002226:	e00b      	b.n	8002240 <HAL_RCC_OscConfig+0x324>
 8002228:	4b58      	ldr	r3, [pc, #352]	; (800238c <HAL_RCC_OscConfig+0x470>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	4a57      	ldr	r2, [pc, #348]	; (800238c <HAL_RCC_OscConfig+0x470>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	6713      	str	r3, [r2, #112]	; 0x70
 8002234:	4b55      	ldr	r3, [pc, #340]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	4a54      	ldr	r2, [pc, #336]	; (800238c <HAL_RCC_OscConfig+0x470>)
 800223a:	f023 0304 	bic.w	r3, r3, #4
 800223e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d015      	beq.n	8002274 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002248:	f7fe fe6e 	bl	8000f28 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224e:	e00a      	b.n	8002266 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002250:	f7fe fe6a 	bl	8000f28 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	f241 3288 	movw	r2, #5000	; 0x1388
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e0cb      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002266:	4b49      	ldr	r3, [pc, #292]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0ee      	beq.n	8002250 <HAL_RCC_OscConfig+0x334>
 8002272:	e014      	b.n	800229e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002274:	f7fe fe58 	bl	8000f28 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227a:	e00a      	b.n	8002292 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227c:	f7fe fe54 	bl	8000f28 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0b5      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002292:	4b3e      	ldr	r3, [pc, #248]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1ee      	bne.n	800227c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800229e:	7dfb      	ldrb	r3, [r7, #23]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a4:	4b39      	ldr	r3, [pc, #228]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	4a38      	ldr	r2, [pc, #224]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80022aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80a1 	beq.w	80023fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022ba:	4b34      	ldr	r3, [pc, #208]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d05c      	beq.n	8002380 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d141      	bne.n	8002352 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	4b31      	ldr	r3, [pc, #196]	; (8002394 <HAL_RCC_OscConfig+0x478>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fe28 	bl	8000f28 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe fe24 	bl	8000f28 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e087      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_RCC_OscConfig+0x470>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	019b      	lsls	r3, r3, #6
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	3b01      	subs	r3, #1
 8002314:	041b      	lsls	r3, r3, #16
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	061b      	lsls	r3, r3, #24
 800231e:	491b      	ldr	r1, [pc, #108]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_RCC_OscConfig+0x478>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fdfd 	bl	8000f28 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe fdf9 	bl	8000f28 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e05c      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x416>
 8002350:	e054      	b.n	80023fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_RCC_OscConfig+0x478>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe fde6 	bl	8000f28 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002360:	f7fe fde2 	bl	8000f28 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e045      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_RCC_OscConfig+0x470>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x444>
 800237e:	e03d      	b.n	80023fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d107      	bne.n	8002398 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e038      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
 800238c:	40023800 	.word	0x40023800
 8002390:	40007000 	.word	0x40007000
 8002394:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCC_OscConfig+0x4ec>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d028      	beq.n	80023f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d121      	bne.n	80023f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d11a      	bne.n	80023f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023c8:	4013      	ands	r3, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d111      	bne.n	80023f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	085b      	lsrs	r3, r3, #1
 80023e0:	3b01      	subs	r3, #1
 80023e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d107      	bne.n	80023f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0cc      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002420:	4b68      	ldr	r3, [pc, #416]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d90c      	bls.n	8002448 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b65      	ldr	r3, [pc, #404]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0b8      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002460:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800246a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002478:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a52      	ldr	r2, [pc, #328]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002482:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002484:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	494d      	ldr	r1, [pc, #308]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d044      	beq.n	800252c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d119      	bne.n	80024ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e07f      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d003      	beq.n	80024ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ca:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d109      	bne.n	80024ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e06f      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	4b3b      	ldr	r3, [pc, #236]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e067      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ea:	4b37      	ldr	r3, [pc, #220]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f023 0203 	bic.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4934      	ldr	r1, [pc, #208]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024fc:	f7fe fd14 	bl	8000f28 <HAL_GetTick>
 8002500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	e00a      	b.n	800251a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002504:	f7fe fd10 	bl	8000f28 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e04f      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 020c 	and.w	r2, r3, #12
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	429a      	cmp	r2, r3
 800252a:	d1eb      	bne.n	8002504 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d20c      	bcs.n	8002554 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e032      	b.n	80025ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4916      	ldr	r1, [pc, #88]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	490e      	ldr	r1, [pc, #56]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002592:	f000 f821 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002596:	4602      	mov	r2, r0
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	490a      	ldr	r1, [pc, #40]	; (80025cc <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	5ccb      	ldrb	r3, [r1, r3]
 80025a6:	fa22 f303 	lsr.w	r3, r2, r3
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fc74 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00
 80025c8:	40023800 	.word	0x40023800
 80025cc:	080037e4 	.word	0x080037e4
 80025d0:	20000000 	.word	0x20000000
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025dc:	b094      	sub	sp, #80	; 0x50
 80025de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	647b      	str	r3, [r7, #68]	; 0x44
 80025e4:	2300      	movs	r3, #0
 80025e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025e8:	2300      	movs	r3, #0
 80025ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025f0:	4b79      	ldr	r3, [pc, #484]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d00d      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x40>
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	f200 80e1 	bhi.w	80027c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x34>
 8002606:	2b04      	cmp	r3, #4
 8002608:	d003      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x3a>
 800260a:	e0db      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800260c:	4b73      	ldr	r3, [pc, #460]	; (80027dc <HAL_RCC_GetSysClockFreq+0x204>)
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002610:	e0db      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002612:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002614:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002616:	e0d8      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002618:	4b6f      	ldr	r3, [pc, #444]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002620:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002622:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d063      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262e:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	099b      	lsrs	r3, r3, #6
 8002634:	2200      	movs	r2, #0
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
 8002638:	63fa      	str	r2, [r7, #60]	; 0x3c
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
 8002642:	2300      	movs	r3, #0
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
 8002646:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800264a:	4622      	mov	r2, r4
 800264c:	462b      	mov	r3, r5
 800264e:	f04f 0000 	mov.w	r0, #0
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	0159      	lsls	r1, r3, #5
 8002658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800265c:	0150      	lsls	r0, r2, #5
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4621      	mov	r1, r4
 8002664:	1a51      	subs	r1, r2, r1
 8002666:	6139      	str	r1, [r7, #16]
 8002668:	4629      	mov	r1, r5
 800266a:	eb63 0301 	sbc.w	r3, r3, r1
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800267c:	4659      	mov	r1, fp
 800267e:	018b      	lsls	r3, r1, #6
 8002680:	4651      	mov	r1, sl
 8002682:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002686:	4651      	mov	r1, sl
 8002688:	018a      	lsls	r2, r1, #6
 800268a:	4651      	mov	r1, sl
 800268c:	ebb2 0801 	subs.w	r8, r2, r1
 8002690:	4659      	mov	r1, fp
 8002692:	eb63 0901 	sbc.w	r9, r3, r1
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026aa:	4690      	mov	r8, r2
 80026ac:	4699      	mov	r9, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	eb18 0303 	adds.w	r3, r8, r3
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	462b      	mov	r3, r5
 80026b8:	eb49 0303 	adc.w	r3, r9, r3
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ca:	4629      	mov	r1, r5
 80026cc:	024b      	lsls	r3, r1, #9
 80026ce:	4621      	mov	r1, r4
 80026d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026d4:	4621      	mov	r1, r4
 80026d6:	024a      	lsls	r2, r1, #9
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026de:	2200      	movs	r2, #0
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026e8:	f7fd fdc2 	bl	8000270 <__aeabi_uldivmod>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4613      	mov	r3, r2
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026f4:	e058      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	2200      	movs	r2, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	4611      	mov	r1, r2
 8002702:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002706:	623b      	str	r3, [r7, #32]
 8002708:	2300      	movs	r3, #0
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
 800270c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002710:	4642      	mov	r2, r8
 8002712:	464b      	mov	r3, r9
 8002714:	f04f 0000 	mov.w	r0, #0
 8002718:	f04f 0100 	mov.w	r1, #0
 800271c:	0159      	lsls	r1, r3, #5
 800271e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002722:	0150      	lsls	r0, r2, #5
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4641      	mov	r1, r8
 800272a:	ebb2 0a01 	subs.w	sl, r2, r1
 800272e:	4649      	mov	r1, r9
 8002730:	eb63 0b01 	sbc.w	fp, r3, r1
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002740:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002744:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002748:	ebb2 040a 	subs.w	r4, r2, sl
 800274c:	eb63 050b 	sbc.w	r5, r3, fp
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	00eb      	lsls	r3, r5, #3
 800275a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800275e:	00e2      	lsls	r2, r4, #3
 8002760:	4614      	mov	r4, r2
 8002762:	461d      	mov	r5, r3
 8002764:	4643      	mov	r3, r8
 8002766:	18e3      	adds	r3, r4, r3
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	464b      	mov	r3, r9
 800276c:	eb45 0303 	adc.w	r3, r5, r3
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800277e:	4629      	mov	r1, r5
 8002780:	028b      	lsls	r3, r1, #10
 8002782:	4621      	mov	r1, r4
 8002784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002788:	4621      	mov	r1, r4
 800278a:	028a      	lsls	r2, r1, #10
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002792:	2200      	movs	r2, #0
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	61fa      	str	r2, [r7, #28]
 8002798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800279c:	f7fd fd68 	bl	8000270 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	3301      	adds	r3, #1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c2:	e002      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_RCC_GetSysClockFreq+0x204>)
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3750      	adds	r7, #80	; 0x50
 80027d0:	46bd      	mov	sp, r7
 80027d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	00f42400 	.word	0x00f42400
 80027e0:	007a1200 	.word	0x007a1200

080027e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000000 	.word	0x20000000

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002800:	f7ff fff0 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0a9b      	lsrs	r3, r3, #10
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	080037f4 	.word	0x080037f4

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002828:	f7ff ffdc 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0b5b      	lsrs	r3, r3, #13
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	080037f4 	.word	0x080037f4

0800284c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e03f      	b.n	80028de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe f9da 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2224      	movs	r2, #36	; 0x24
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800288e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f87d 	bl	8002990 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e047      	b.n	8002988 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7fe f98d 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2224      	movs	r2, #36	; 0x24
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002928:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f830 	bl	8002990 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800293e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800294e:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0208 	orr.w	r2, r2, #8
 800295e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800296e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002994:	b0c0      	sub	sp, #256	; 0x100
 8002996:	af00      	add	r7, sp, #0
 8002998:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	68d9      	ldr	r1, [r3, #12]
 80029ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	ea40 0301 	orr.w	r3, r0, r1
 80029b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029e8:	f021 010c 	bic.w	r1, r1, #12
 80029ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029f6:	430b      	orrs	r3, r1
 80029f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0a:	6999      	ldr	r1, [r3, #24]
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	ea40 0301 	orr.w	r3, r0, r1
 8002a16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b8f      	ldr	r3, [pc, #572]	; (8002c5c <UART_SetConfig+0x2cc>)
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d005      	beq.n	8002a30 <UART_SetConfig+0xa0>
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	4b8d      	ldr	r3, [pc, #564]	; (8002c60 <UART_SetConfig+0x2d0>)
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d104      	bne.n	8002a3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a30:	f7ff fef8 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8002a34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a38:	e003      	b.n	8002a42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a3a:	f7ff fedf 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8002a3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a4c:	f040 810c 	bne.w	8002c68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a54:	2200      	movs	r2, #0
 8002a56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a62:	4622      	mov	r2, r4
 8002a64:	462b      	mov	r3, r5
 8002a66:	1891      	adds	r1, r2, r2
 8002a68:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a6a:	415b      	adcs	r3, r3
 8002a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a72:	4621      	mov	r1, r4
 8002a74:	eb12 0801 	adds.w	r8, r2, r1
 8002a78:	4629      	mov	r1, r5
 8002a7a:	eb43 0901 	adc.w	r9, r3, r1
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a92:	4690      	mov	r8, r2
 8002a94:	4699      	mov	r9, r3
 8002a96:	4623      	mov	r3, r4
 8002a98:	eb18 0303 	adds.w	r3, r8, r3
 8002a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002aa0:	462b      	mov	r3, r5
 8002aa2:	eb49 0303 	adc.w	r3, r9, r3
 8002aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ab6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002aba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002abe:	460b      	mov	r3, r1
 8002ac0:	18db      	adds	r3, r3, r3
 8002ac2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	eb42 0303 	adc.w	r3, r2, r3
 8002aca:	657b      	str	r3, [r7, #84]	; 0x54
 8002acc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ad0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ad4:	f7fd fbcc 	bl	8000270 <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4b61      	ldr	r3, [pc, #388]	; (8002c64 <UART_SetConfig+0x2d4>)
 8002ade:	fba3 2302 	umull	r2, r3, r3, r2
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	011c      	lsls	r4, r3, #4
 8002ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002af0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002af4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002af8:	4642      	mov	r2, r8
 8002afa:	464b      	mov	r3, r9
 8002afc:	1891      	adds	r1, r2, r2
 8002afe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b00:	415b      	adcs	r3, r3
 8002b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b08:	4641      	mov	r1, r8
 8002b0a:	eb12 0a01 	adds.w	sl, r2, r1
 8002b0e:	4649      	mov	r1, r9
 8002b10:	eb43 0b01 	adc.w	fp, r3, r1
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b28:	4692      	mov	sl, r2
 8002b2a:	469b      	mov	fp, r3
 8002b2c:	4643      	mov	r3, r8
 8002b2e:	eb1a 0303 	adds.w	r3, sl, r3
 8002b32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b36:	464b      	mov	r3, r9
 8002b38:	eb4b 0303 	adc.w	r3, fp, r3
 8002b3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b54:	460b      	mov	r3, r1
 8002b56:	18db      	adds	r3, r3, r3
 8002b58:	643b      	str	r3, [r7, #64]	; 0x40
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	eb42 0303 	adc.w	r3, r2, r3
 8002b60:	647b      	str	r3, [r7, #68]	; 0x44
 8002b62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b6a:	f7fd fb81 	bl	8000270 <__aeabi_uldivmod>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4611      	mov	r1, r2
 8002b74:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <UART_SetConfig+0x2d4>)
 8002b76:	fba3 2301 	umull	r2, r3, r3, r1
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	2264      	movs	r2, #100	; 0x64
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	1acb      	subs	r3, r1, r3
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b8a:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <UART_SetConfig+0x2d4>)
 8002b8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b98:	441c      	add	r4, r3
 8002b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ba4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ba8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002bac:	4642      	mov	r2, r8
 8002bae:	464b      	mov	r3, r9
 8002bb0:	1891      	adds	r1, r2, r2
 8002bb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bb4:	415b      	adcs	r3, r3
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bbc:	4641      	mov	r1, r8
 8002bbe:	1851      	adds	r1, r2, r1
 8002bc0:	6339      	str	r1, [r7, #48]	; 0x30
 8002bc2:	4649      	mov	r1, r9
 8002bc4:	414b      	adcs	r3, r1
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bd4:	4659      	mov	r1, fp
 8002bd6:	00cb      	lsls	r3, r1, #3
 8002bd8:	4651      	mov	r1, sl
 8002bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bde:	4651      	mov	r1, sl
 8002be0:	00ca      	lsls	r2, r1, #3
 8002be2:	4610      	mov	r0, r2
 8002be4:	4619      	mov	r1, r3
 8002be6:	4603      	mov	r3, r0
 8002be8:	4642      	mov	r2, r8
 8002bea:	189b      	adds	r3, r3, r2
 8002bec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bf0:	464b      	mov	r3, r9
 8002bf2:	460a      	mov	r2, r1
 8002bf4:	eb42 0303 	adc.w	r3, r2, r3
 8002bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c10:	460b      	mov	r3, r1
 8002c12:	18db      	adds	r3, r3, r3
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c16:	4613      	mov	r3, r2
 8002c18:	eb42 0303 	adc.w	r3, r2, r3
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c26:	f7fd fb23 	bl	8000270 <__aeabi_uldivmod>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <UART_SetConfig+0x2d4>)
 8002c30:	fba3 1302 	umull	r1, r3, r3, r2
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	2164      	movs	r1, #100	; 0x64
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	3332      	adds	r3, #50	; 0x32
 8002c42:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <UART_SetConfig+0x2d4>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	095b      	lsrs	r3, r3, #5
 8002c4a:	f003 0207 	and.w	r2, r3, #7
 8002c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4422      	add	r2, r4
 8002c56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c58:	e105      	b.n	8002e66 <UART_SetConfig+0x4d6>
 8002c5a:	bf00      	nop
 8002c5c:	40011000 	.word	0x40011000
 8002c60:	40011400 	.word	0x40011400
 8002c64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c7a:	4642      	mov	r2, r8
 8002c7c:	464b      	mov	r3, r9
 8002c7e:	1891      	adds	r1, r2, r2
 8002c80:	6239      	str	r1, [r7, #32]
 8002c82:	415b      	adcs	r3, r3
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
 8002c86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c8a:	4641      	mov	r1, r8
 8002c8c:	1854      	adds	r4, r2, r1
 8002c8e:	4649      	mov	r1, r9
 8002c90:	eb43 0501 	adc.w	r5, r3, r1
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	00eb      	lsls	r3, r5, #3
 8002c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ca2:	00e2      	lsls	r2, r4, #3
 8002ca4:	4614      	mov	r4, r2
 8002ca6:	461d      	mov	r5, r3
 8002ca8:	4643      	mov	r3, r8
 8002caa:	18e3      	adds	r3, r4, r3
 8002cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002cb0:	464b      	mov	r3, r9
 8002cb2:	eb45 0303 	adc.w	r3, r5, r3
 8002cb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	008b      	lsls	r3, r1, #2
 8002cda:	4621      	mov	r1, r4
 8002cdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	008a      	lsls	r2, r1, #2
 8002ce4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ce8:	f7fd fac2 	bl	8000270 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4b60      	ldr	r3, [pc, #384]	; (8002e74 <UART_SetConfig+0x4e4>)
 8002cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	011c      	lsls	r4, r3, #4
 8002cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d0c:	4642      	mov	r2, r8
 8002d0e:	464b      	mov	r3, r9
 8002d10:	1891      	adds	r1, r2, r2
 8002d12:	61b9      	str	r1, [r7, #24]
 8002d14:	415b      	adcs	r3, r3
 8002d16:	61fb      	str	r3, [r7, #28]
 8002d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d1c:	4641      	mov	r1, r8
 8002d1e:	1851      	adds	r1, r2, r1
 8002d20:	6139      	str	r1, [r7, #16]
 8002d22:	4649      	mov	r1, r9
 8002d24:	414b      	adcs	r3, r1
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d34:	4659      	mov	r1, fp
 8002d36:	00cb      	lsls	r3, r1, #3
 8002d38:	4651      	mov	r1, sl
 8002d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d3e:	4651      	mov	r1, sl
 8002d40:	00ca      	lsls	r2, r1, #3
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	4642      	mov	r2, r8
 8002d4a:	189b      	adds	r3, r3, r2
 8002d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d50:	464b      	mov	r3, r9
 8002d52:	460a      	mov	r2, r1
 8002d54:	eb42 0303 	adc.w	r3, r2, r3
 8002d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d74:	4649      	mov	r1, r9
 8002d76:	008b      	lsls	r3, r1, #2
 8002d78:	4641      	mov	r1, r8
 8002d7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d7e:	4641      	mov	r1, r8
 8002d80:	008a      	lsls	r2, r1, #2
 8002d82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d86:	f7fd fa73 	bl	8000270 <__aeabi_uldivmod>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <UART_SetConfig+0x4e4>)
 8002d90:	fba3 1302 	umull	r1, r3, r3, r2
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	2164      	movs	r1, #100	; 0x64
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	3332      	adds	r3, #50	; 0x32
 8002da2:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <UART_SetConfig+0x4e4>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dae:	441c      	add	r4, r3
 8002db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002db4:	2200      	movs	r2, #0
 8002db6:	673b      	str	r3, [r7, #112]	; 0x70
 8002db8:	677a      	str	r2, [r7, #116]	; 0x74
 8002dba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002dbe:	4642      	mov	r2, r8
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	1891      	adds	r1, r2, r2
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	415b      	adcs	r3, r3
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dce:	4641      	mov	r1, r8
 8002dd0:	1851      	adds	r1, r2, r1
 8002dd2:	6039      	str	r1, [r7, #0]
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	414b      	adcs	r3, r1
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002de6:	4659      	mov	r1, fp
 8002de8:	00cb      	lsls	r3, r1, #3
 8002dea:	4651      	mov	r1, sl
 8002dec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002df0:	4651      	mov	r1, sl
 8002df2:	00ca      	lsls	r2, r1, #3
 8002df4:	4610      	mov	r0, r2
 8002df6:	4619      	mov	r1, r3
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4642      	mov	r2, r8
 8002dfc:	189b      	adds	r3, r3, r2
 8002dfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e00:	464b      	mov	r3, r9
 8002e02:	460a      	mov	r2, r1
 8002e04:	eb42 0303 	adc.w	r3, r2, r3
 8002e08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	663b      	str	r3, [r7, #96]	; 0x60
 8002e14:	667a      	str	r2, [r7, #100]	; 0x64
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e22:	4649      	mov	r1, r9
 8002e24:	008b      	lsls	r3, r1, #2
 8002e26:	4641      	mov	r1, r8
 8002e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e2c:	4641      	mov	r1, r8
 8002e2e:	008a      	lsls	r2, r1, #2
 8002e30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e34:	f7fd fa1c 	bl	8000270 <__aeabi_uldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <UART_SetConfig+0x4e4>)
 8002e3e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2164      	movs	r1, #100	; 0x64
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	3332      	adds	r3, #50	; 0x32
 8002e50:	4a08      	ldr	r2, [pc, #32]	; (8002e74 <UART_SetConfig+0x4e4>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	f003 020f 	and.w	r2, r3, #15
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4422      	add	r2, r4
 8002e64:	609a      	str	r2, [r3, #8]
}
 8002e66:	bf00      	nop
 8002e68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e72:	bf00      	nop
 8002e74:	51eb851f 	.word	0x51eb851f

08002e78 <__errno>:
 8002e78:	4b01      	ldr	r3, [pc, #4]	; (8002e80 <__errno+0x8>)
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	2000000c 	.word	0x2000000c

08002e84 <__libc_init_array>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	4d0d      	ldr	r5, [pc, #52]	; (8002ebc <__libc_init_array+0x38>)
 8002e88:	4c0d      	ldr	r4, [pc, #52]	; (8002ec0 <__libc_init_array+0x3c>)
 8002e8a:	1b64      	subs	r4, r4, r5
 8002e8c:	10a4      	asrs	r4, r4, #2
 8002e8e:	2600      	movs	r6, #0
 8002e90:	42a6      	cmp	r6, r4
 8002e92:	d109      	bne.n	8002ea8 <__libc_init_array+0x24>
 8002e94:	4d0b      	ldr	r5, [pc, #44]	; (8002ec4 <__libc_init_array+0x40>)
 8002e96:	4c0c      	ldr	r4, [pc, #48]	; (8002ec8 <__libc_init_array+0x44>)
 8002e98:	f000 fc8e 	bl	80037b8 <_init>
 8002e9c:	1b64      	subs	r4, r4, r5
 8002e9e:	10a4      	asrs	r4, r4, #2
 8002ea0:	2600      	movs	r6, #0
 8002ea2:	42a6      	cmp	r6, r4
 8002ea4:	d105      	bne.n	8002eb2 <__libc_init_array+0x2e>
 8002ea6:	bd70      	pop	{r4, r5, r6, pc}
 8002ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eac:	4798      	blx	r3
 8002eae:	3601      	adds	r6, #1
 8002eb0:	e7ee      	b.n	8002e90 <__libc_init_array+0xc>
 8002eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb6:	4798      	blx	r3
 8002eb8:	3601      	adds	r6, #1
 8002eba:	e7f2      	b.n	8002ea2 <__libc_init_array+0x1e>
 8002ebc:	08003838 	.word	0x08003838
 8002ec0:	08003838 	.word	0x08003838
 8002ec4:	08003838 	.word	0x08003838
 8002ec8:	0800383c 	.word	0x0800383c

08002ecc <memset>:
 8002ecc:	4402      	add	r2, r0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d100      	bne.n	8002ed6 <memset+0xa>
 8002ed4:	4770      	bx	lr
 8002ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eda:	e7f9      	b.n	8002ed0 <memset+0x4>

08002edc <siprintf>:
 8002edc:	b40e      	push	{r1, r2, r3}
 8002ede:	b500      	push	{lr}
 8002ee0:	b09c      	sub	sp, #112	; 0x70
 8002ee2:	ab1d      	add	r3, sp, #116	; 0x74
 8002ee4:	9002      	str	r0, [sp, #8]
 8002ee6:	9006      	str	r0, [sp, #24]
 8002ee8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002eec:	4809      	ldr	r0, [pc, #36]	; (8002f14 <siprintf+0x38>)
 8002eee:	9107      	str	r1, [sp, #28]
 8002ef0:	9104      	str	r1, [sp, #16]
 8002ef2:	4909      	ldr	r1, [pc, #36]	; (8002f18 <siprintf+0x3c>)
 8002ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ef8:	9105      	str	r1, [sp, #20]
 8002efa:	6800      	ldr	r0, [r0, #0]
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	a902      	add	r1, sp, #8
 8002f00:	f000 f868 	bl	8002fd4 <_svfiprintf_r>
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	b01c      	add	sp, #112	; 0x70
 8002f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f10:	b003      	add	sp, #12
 8002f12:	4770      	bx	lr
 8002f14:	2000000c 	.word	0x2000000c
 8002f18:	ffff0208 	.word	0xffff0208

08002f1c <__ssputs_r>:
 8002f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f20:	688e      	ldr	r6, [r1, #8]
 8002f22:	429e      	cmp	r6, r3
 8002f24:	4682      	mov	sl, r0
 8002f26:	460c      	mov	r4, r1
 8002f28:	4690      	mov	r8, r2
 8002f2a:	461f      	mov	r7, r3
 8002f2c:	d838      	bhi.n	8002fa0 <__ssputs_r+0x84>
 8002f2e:	898a      	ldrh	r2, [r1, #12]
 8002f30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f34:	d032      	beq.n	8002f9c <__ssputs_r+0x80>
 8002f36:	6825      	ldr	r5, [r4, #0]
 8002f38:	6909      	ldr	r1, [r1, #16]
 8002f3a:	eba5 0901 	sub.w	r9, r5, r1
 8002f3e:	6965      	ldr	r5, [r4, #20]
 8002f40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f48:	3301      	adds	r3, #1
 8002f4a:	444b      	add	r3, r9
 8002f4c:	106d      	asrs	r5, r5, #1
 8002f4e:	429d      	cmp	r5, r3
 8002f50:	bf38      	it	cc
 8002f52:	461d      	movcc	r5, r3
 8002f54:	0553      	lsls	r3, r2, #21
 8002f56:	d531      	bpl.n	8002fbc <__ssputs_r+0xa0>
 8002f58:	4629      	mov	r1, r5
 8002f5a:	f000 fb63 	bl	8003624 <_malloc_r>
 8002f5e:	4606      	mov	r6, r0
 8002f60:	b950      	cbnz	r0, 8002f78 <__ssputs_r+0x5c>
 8002f62:	230c      	movs	r3, #12
 8002f64:	f8ca 3000 	str.w	r3, [sl]
 8002f68:	89a3      	ldrh	r3, [r4, #12]
 8002f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f6e:	81a3      	strh	r3, [r4, #12]
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f78:	6921      	ldr	r1, [r4, #16]
 8002f7a:	464a      	mov	r2, r9
 8002f7c:	f000 fabe 	bl	80034fc <memcpy>
 8002f80:	89a3      	ldrh	r3, [r4, #12]
 8002f82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f8a:	81a3      	strh	r3, [r4, #12]
 8002f8c:	6126      	str	r6, [r4, #16]
 8002f8e:	6165      	str	r5, [r4, #20]
 8002f90:	444e      	add	r6, r9
 8002f92:	eba5 0509 	sub.w	r5, r5, r9
 8002f96:	6026      	str	r6, [r4, #0]
 8002f98:	60a5      	str	r5, [r4, #8]
 8002f9a:	463e      	mov	r6, r7
 8002f9c:	42be      	cmp	r6, r7
 8002f9e:	d900      	bls.n	8002fa2 <__ssputs_r+0x86>
 8002fa0:	463e      	mov	r6, r7
 8002fa2:	6820      	ldr	r0, [r4, #0]
 8002fa4:	4632      	mov	r2, r6
 8002fa6:	4641      	mov	r1, r8
 8002fa8:	f000 fab6 	bl	8003518 <memmove>
 8002fac:	68a3      	ldr	r3, [r4, #8]
 8002fae:	1b9b      	subs	r3, r3, r6
 8002fb0:	60a3      	str	r3, [r4, #8]
 8002fb2:	6823      	ldr	r3, [r4, #0]
 8002fb4:	4433      	add	r3, r6
 8002fb6:	6023      	str	r3, [r4, #0]
 8002fb8:	2000      	movs	r0, #0
 8002fba:	e7db      	b.n	8002f74 <__ssputs_r+0x58>
 8002fbc:	462a      	mov	r2, r5
 8002fbe:	f000 fba5 	bl	800370c <_realloc_r>
 8002fc2:	4606      	mov	r6, r0
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d1e1      	bne.n	8002f8c <__ssputs_r+0x70>
 8002fc8:	6921      	ldr	r1, [r4, #16]
 8002fca:	4650      	mov	r0, sl
 8002fcc:	f000 fabe 	bl	800354c <_free_r>
 8002fd0:	e7c7      	b.n	8002f62 <__ssputs_r+0x46>
	...

08002fd4 <_svfiprintf_r>:
 8002fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd8:	4698      	mov	r8, r3
 8002fda:	898b      	ldrh	r3, [r1, #12]
 8002fdc:	061b      	lsls	r3, r3, #24
 8002fde:	b09d      	sub	sp, #116	; 0x74
 8002fe0:	4607      	mov	r7, r0
 8002fe2:	460d      	mov	r5, r1
 8002fe4:	4614      	mov	r4, r2
 8002fe6:	d50e      	bpl.n	8003006 <_svfiprintf_r+0x32>
 8002fe8:	690b      	ldr	r3, [r1, #16]
 8002fea:	b963      	cbnz	r3, 8003006 <_svfiprintf_r+0x32>
 8002fec:	2140      	movs	r1, #64	; 0x40
 8002fee:	f000 fb19 	bl	8003624 <_malloc_r>
 8002ff2:	6028      	str	r0, [r5, #0]
 8002ff4:	6128      	str	r0, [r5, #16]
 8002ff6:	b920      	cbnz	r0, 8003002 <_svfiprintf_r+0x2e>
 8002ff8:	230c      	movs	r3, #12
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8003000:	e0d1      	b.n	80031a6 <_svfiprintf_r+0x1d2>
 8003002:	2340      	movs	r3, #64	; 0x40
 8003004:	616b      	str	r3, [r5, #20]
 8003006:	2300      	movs	r3, #0
 8003008:	9309      	str	r3, [sp, #36]	; 0x24
 800300a:	2320      	movs	r3, #32
 800300c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003010:	f8cd 800c 	str.w	r8, [sp, #12]
 8003014:	2330      	movs	r3, #48	; 0x30
 8003016:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80031c0 <_svfiprintf_r+0x1ec>
 800301a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800301e:	f04f 0901 	mov.w	r9, #1
 8003022:	4623      	mov	r3, r4
 8003024:	469a      	mov	sl, r3
 8003026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800302a:	b10a      	cbz	r2, 8003030 <_svfiprintf_r+0x5c>
 800302c:	2a25      	cmp	r2, #37	; 0x25
 800302e:	d1f9      	bne.n	8003024 <_svfiprintf_r+0x50>
 8003030:	ebba 0b04 	subs.w	fp, sl, r4
 8003034:	d00b      	beq.n	800304e <_svfiprintf_r+0x7a>
 8003036:	465b      	mov	r3, fp
 8003038:	4622      	mov	r2, r4
 800303a:	4629      	mov	r1, r5
 800303c:	4638      	mov	r0, r7
 800303e:	f7ff ff6d 	bl	8002f1c <__ssputs_r>
 8003042:	3001      	adds	r0, #1
 8003044:	f000 80aa 	beq.w	800319c <_svfiprintf_r+0x1c8>
 8003048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800304a:	445a      	add	r2, fp
 800304c:	9209      	str	r2, [sp, #36]	; 0x24
 800304e:	f89a 3000 	ldrb.w	r3, [sl]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80a2 	beq.w	800319c <_svfiprintf_r+0x1c8>
 8003058:	2300      	movs	r3, #0
 800305a:	f04f 32ff 	mov.w	r2, #4294967295
 800305e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003062:	f10a 0a01 	add.w	sl, sl, #1
 8003066:	9304      	str	r3, [sp, #16]
 8003068:	9307      	str	r3, [sp, #28]
 800306a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800306e:	931a      	str	r3, [sp, #104]	; 0x68
 8003070:	4654      	mov	r4, sl
 8003072:	2205      	movs	r2, #5
 8003074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003078:	4851      	ldr	r0, [pc, #324]	; (80031c0 <_svfiprintf_r+0x1ec>)
 800307a:	f7fd f8a9 	bl	80001d0 <memchr>
 800307e:	9a04      	ldr	r2, [sp, #16]
 8003080:	b9d8      	cbnz	r0, 80030ba <_svfiprintf_r+0xe6>
 8003082:	06d0      	lsls	r0, r2, #27
 8003084:	bf44      	itt	mi
 8003086:	2320      	movmi	r3, #32
 8003088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800308c:	0711      	lsls	r1, r2, #28
 800308e:	bf44      	itt	mi
 8003090:	232b      	movmi	r3, #43	; 0x2b
 8003092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003096:	f89a 3000 	ldrb.w	r3, [sl]
 800309a:	2b2a      	cmp	r3, #42	; 0x2a
 800309c:	d015      	beq.n	80030ca <_svfiprintf_r+0xf6>
 800309e:	9a07      	ldr	r2, [sp, #28]
 80030a0:	4654      	mov	r4, sl
 80030a2:	2000      	movs	r0, #0
 80030a4:	f04f 0c0a 	mov.w	ip, #10
 80030a8:	4621      	mov	r1, r4
 80030aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030ae:	3b30      	subs	r3, #48	; 0x30
 80030b0:	2b09      	cmp	r3, #9
 80030b2:	d94e      	bls.n	8003152 <_svfiprintf_r+0x17e>
 80030b4:	b1b0      	cbz	r0, 80030e4 <_svfiprintf_r+0x110>
 80030b6:	9207      	str	r2, [sp, #28]
 80030b8:	e014      	b.n	80030e4 <_svfiprintf_r+0x110>
 80030ba:	eba0 0308 	sub.w	r3, r0, r8
 80030be:	fa09 f303 	lsl.w	r3, r9, r3
 80030c2:	4313      	orrs	r3, r2
 80030c4:	9304      	str	r3, [sp, #16]
 80030c6:	46a2      	mov	sl, r4
 80030c8:	e7d2      	b.n	8003070 <_svfiprintf_r+0x9c>
 80030ca:	9b03      	ldr	r3, [sp, #12]
 80030cc:	1d19      	adds	r1, r3, #4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	9103      	str	r1, [sp, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bfbb      	ittet	lt
 80030d6:	425b      	neglt	r3, r3
 80030d8:	f042 0202 	orrlt.w	r2, r2, #2
 80030dc:	9307      	strge	r3, [sp, #28]
 80030de:	9307      	strlt	r3, [sp, #28]
 80030e0:	bfb8      	it	lt
 80030e2:	9204      	strlt	r2, [sp, #16]
 80030e4:	7823      	ldrb	r3, [r4, #0]
 80030e6:	2b2e      	cmp	r3, #46	; 0x2e
 80030e8:	d10c      	bne.n	8003104 <_svfiprintf_r+0x130>
 80030ea:	7863      	ldrb	r3, [r4, #1]
 80030ec:	2b2a      	cmp	r3, #42	; 0x2a
 80030ee:	d135      	bne.n	800315c <_svfiprintf_r+0x188>
 80030f0:	9b03      	ldr	r3, [sp, #12]
 80030f2:	1d1a      	adds	r2, r3, #4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	9203      	str	r2, [sp, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bfb8      	it	lt
 80030fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003100:	3402      	adds	r4, #2
 8003102:	9305      	str	r3, [sp, #20]
 8003104:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80031d0 <_svfiprintf_r+0x1fc>
 8003108:	7821      	ldrb	r1, [r4, #0]
 800310a:	2203      	movs	r2, #3
 800310c:	4650      	mov	r0, sl
 800310e:	f7fd f85f 	bl	80001d0 <memchr>
 8003112:	b140      	cbz	r0, 8003126 <_svfiprintf_r+0x152>
 8003114:	2340      	movs	r3, #64	; 0x40
 8003116:	eba0 000a 	sub.w	r0, r0, sl
 800311a:	fa03 f000 	lsl.w	r0, r3, r0
 800311e:	9b04      	ldr	r3, [sp, #16]
 8003120:	4303      	orrs	r3, r0
 8003122:	3401      	adds	r4, #1
 8003124:	9304      	str	r3, [sp, #16]
 8003126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800312a:	4826      	ldr	r0, [pc, #152]	; (80031c4 <_svfiprintf_r+0x1f0>)
 800312c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003130:	2206      	movs	r2, #6
 8003132:	f7fd f84d 	bl	80001d0 <memchr>
 8003136:	2800      	cmp	r0, #0
 8003138:	d038      	beq.n	80031ac <_svfiprintf_r+0x1d8>
 800313a:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <_svfiprintf_r+0x1f4>)
 800313c:	bb1b      	cbnz	r3, 8003186 <_svfiprintf_r+0x1b2>
 800313e:	9b03      	ldr	r3, [sp, #12]
 8003140:	3307      	adds	r3, #7
 8003142:	f023 0307 	bic.w	r3, r3, #7
 8003146:	3308      	adds	r3, #8
 8003148:	9303      	str	r3, [sp, #12]
 800314a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800314c:	4433      	add	r3, r6
 800314e:	9309      	str	r3, [sp, #36]	; 0x24
 8003150:	e767      	b.n	8003022 <_svfiprintf_r+0x4e>
 8003152:	fb0c 3202 	mla	r2, ip, r2, r3
 8003156:	460c      	mov	r4, r1
 8003158:	2001      	movs	r0, #1
 800315a:	e7a5      	b.n	80030a8 <_svfiprintf_r+0xd4>
 800315c:	2300      	movs	r3, #0
 800315e:	3401      	adds	r4, #1
 8003160:	9305      	str	r3, [sp, #20]
 8003162:	4619      	mov	r1, r3
 8003164:	f04f 0c0a 	mov.w	ip, #10
 8003168:	4620      	mov	r0, r4
 800316a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800316e:	3a30      	subs	r2, #48	; 0x30
 8003170:	2a09      	cmp	r2, #9
 8003172:	d903      	bls.n	800317c <_svfiprintf_r+0x1a8>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0c5      	beq.n	8003104 <_svfiprintf_r+0x130>
 8003178:	9105      	str	r1, [sp, #20]
 800317a:	e7c3      	b.n	8003104 <_svfiprintf_r+0x130>
 800317c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003180:	4604      	mov	r4, r0
 8003182:	2301      	movs	r3, #1
 8003184:	e7f0      	b.n	8003168 <_svfiprintf_r+0x194>
 8003186:	ab03      	add	r3, sp, #12
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	462a      	mov	r2, r5
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <_svfiprintf_r+0x1f8>)
 800318e:	a904      	add	r1, sp, #16
 8003190:	4638      	mov	r0, r7
 8003192:	f3af 8000 	nop.w
 8003196:	1c42      	adds	r2, r0, #1
 8003198:	4606      	mov	r6, r0
 800319a:	d1d6      	bne.n	800314a <_svfiprintf_r+0x176>
 800319c:	89ab      	ldrh	r3, [r5, #12]
 800319e:	065b      	lsls	r3, r3, #25
 80031a0:	f53f af2c 	bmi.w	8002ffc <_svfiprintf_r+0x28>
 80031a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031a6:	b01d      	add	sp, #116	; 0x74
 80031a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ac:	ab03      	add	r3, sp, #12
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	462a      	mov	r2, r5
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <_svfiprintf_r+0x1f8>)
 80031b4:	a904      	add	r1, sp, #16
 80031b6:	4638      	mov	r0, r7
 80031b8:	f000 f87a 	bl	80032b0 <_printf_i>
 80031bc:	e7eb      	b.n	8003196 <_svfiprintf_r+0x1c2>
 80031be:	bf00      	nop
 80031c0:	080037fc 	.word	0x080037fc
 80031c4:	08003806 	.word	0x08003806
 80031c8:	00000000 	.word	0x00000000
 80031cc:	08002f1d 	.word	0x08002f1d
 80031d0:	08003802 	.word	0x08003802

080031d4 <_printf_common>:
 80031d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031d8:	4616      	mov	r6, r2
 80031da:	4699      	mov	r9, r3
 80031dc:	688a      	ldr	r2, [r1, #8]
 80031de:	690b      	ldr	r3, [r1, #16]
 80031e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031e4:	4293      	cmp	r3, r2
 80031e6:	bfb8      	it	lt
 80031e8:	4613      	movlt	r3, r2
 80031ea:	6033      	str	r3, [r6, #0]
 80031ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031f0:	4607      	mov	r7, r0
 80031f2:	460c      	mov	r4, r1
 80031f4:	b10a      	cbz	r2, 80031fa <_printf_common+0x26>
 80031f6:	3301      	adds	r3, #1
 80031f8:	6033      	str	r3, [r6, #0]
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	0699      	lsls	r1, r3, #26
 80031fe:	bf42      	ittt	mi
 8003200:	6833      	ldrmi	r3, [r6, #0]
 8003202:	3302      	addmi	r3, #2
 8003204:	6033      	strmi	r3, [r6, #0]
 8003206:	6825      	ldr	r5, [r4, #0]
 8003208:	f015 0506 	ands.w	r5, r5, #6
 800320c:	d106      	bne.n	800321c <_printf_common+0x48>
 800320e:	f104 0a19 	add.w	sl, r4, #25
 8003212:	68e3      	ldr	r3, [r4, #12]
 8003214:	6832      	ldr	r2, [r6, #0]
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	42ab      	cmp	r3, r5
 800321a:	dc26      	bgt.n	800326a <_printf_common+0x96>
 800321c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003220:	1e13      	subs	r3, r2, #0
 8003222:	6822      	ldr	r2, [r4, #0]
 8003224:	bf18      	it	ne
 8003226:	2301      	movne	r3, #1
 8003228:	0692      	lsls	r2, r2, #26
 800322a:	d42b      	bmi.n	8003284 <_printf_common+0xb0>
 800322c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003230:	4649      	mov	r1, r9
 8003232:	4638      	mov	r0, r7
 8003234:	47c0      	blx	r8
 8003236:	3001      	adds	r0, #1
 8003238:	d01e      	beq.n	8003278 <_printf_common+0xa4>
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	68e5      	ldr	r5, [r4, #12]
 800323e:	6832      	ldr	r2, [r6, #0]
 8003240:	f003 0306 	and.w	r3, r3, #6
 8003244:	2b04      	cmp	r3, #4
 8003246:	bf08      	it	eq
 8003248:	1aad      	subeq	r5, r5, r2
 800324a:	68a3      	ldr	r3, [r4, #8]
 800324c:	6922      	ldr	r2, [r4, #16]
 800324e:	bf0c      	ite	eq
 8003250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003254:	2500      	movne	r5, #0
 8003256:	4293      	cmp	r3, r2
 8003258:	bfc4      	itt	gt
 800325a:	1a9b      	subgt	r3, r3, r2
 800325c:	18ed      	addgt	r5, r5, r3
 800325e:	2600      	movs	r6, #0
 8003260:	341a      	adds	r4, #26
 8003262:	42b5      	cmp	r5, r6
 8003264:	d11a      	bne.n	800329c <_printf_common+0xc8>
 8003266:	2000      	movs	r0, #0
 8003268:	e008      	b.n	800327c <_printf_common+0xa8>
 800326a:	2301      	movs	r3, #1
 800326c:	4652      	mov	r2, sl
 800326e:	4649      	mov	r1, r9
 8003270:	4638      	mov	r0, r7
 8003272:	47c0      	blx	r8
 8003274:	3001      	adds	r0, #1
 8003276:	d103      	bne.n	8003280 <_printf_common+0xac>
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003280:	3501      	adds	r5, #1
 8003282:	e7c6      	b.n	8003212 <_printf_common+0x3e>
 8003284:	18e1      	adds	r1, r4, r3
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	2030      	movs	r0, #48	; 0x30
 800328a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800328e:	4422      	add	r2, r4
 8003290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003298:	3302      	adds	r3, #2
 800329a:	e7c7      	b.n	800322c <_printf_common+0x58>
 800329c:	2301      	movs	r3, #1
 800329e:	4622      	mov	r2, r4
 80032a0:	4649      	mov	r1, r9
 80032a2:	4638      	mov	r0, r7
 80032a4:	47c0      	blx	r8
 80032a6:	3001      	adds	r0, #1
 80032a8:	d0e6      	beq.n	8003278 <_printf_common+0xa4>
 80032aa:	3601      	adds	r6, #1
 80032ac:	e7d9      	b.n	8003262 <_printf_common+0x8e>
	...

080032b0 <_printf_i>:
 80032b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032b4:	7e0f      	ldrb	r7, [r1, #24]
 80032b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032b8:	2f78      	cmp	r7, #120	; 0x78
 80032ba:	4691      	mov	r9, r2
 80032bc:	4680      	mov	r8, r0
 80032be:	460c      	mov	r4, r1
 80032c0:	469a      	mov	sl, r3
 80032c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032c6:	d807      	bhi.n	80032d8 <_printf_i+0x28>
 80032c8:	2f62      	cmp	r7, #98	; 0x62
 80032ca:	d80a      	bhi.n	80032e2 <_printf_i+0x32>
 80032cc:	2f00      	cmp	r7, #0
 80032ce:	f000 80d8 	beq.w	8003482 <_printf_i+0x1d2>
 80032d2:	2f58      	cmp	r7, #88	; 0x58
 80032d4:	f000 80a3 	beq.w	800341e <_printf_i+0x16e>
 80032d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032e0:	e03a      	b.n	8003358 <_printf_i+0xa8>
 80032e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032e6:	2b15      	cmp	r3, #21
 80032e8:	d8f6      	bhi.n	80032d8 <_printf_i+0x28>
 80032ea:	a101      	add	r1, pc, #4	; (adr r1, 80032f0 <_printf_i+0x40>)
 80032ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032f0:	08003349 	.word	0x08003349
 80032f4:	0800335d 	.word	0x0800335d
 80032f8:	080032d9 	.word	0x080032d9
 80032fc:	080032d9 	.word	0x080032d9
 8003300:	080032d9 	.word	0x080032d9
 8003304:	080032d9 	.word	0x080032d9
 8003308:	0800335d 	.word	0x0800335d
 800330c:	080032d9 	.word	0x080032d9
 8003310:	080032d9 	.word	0x080032d9
 8003314:	080032d9 	.word	0x080032d9
 8003318:	080032d9 	.word	0x080032d9
 800331c:	08003469 	.word	0x08003469
 8003320:	0800338d 	.word	0x0800338d
 8003324:	0800344b 	.word	0x0800344b
 8003328:	080032d9 	.word	0x080032d9
 800332c:	080032d9 	.word	0x080032d9
 8003330:	0800348b 	.word	0x0800348b
 8003334:	080032d9 	.word	0x080032d9
 8003338:	0800338d 	.word	0x0800338d
 800333c:	080032d9 	.word	0x080032d9
 8003340:	080032d9 	.word	0x080032d9
 8003344:	08003453 	.word	0x08003453
 8003348:	682b      	ldr	r3, [r5, #0]
 800334a:	1d1a      	adds	r2, r3, #4
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	602a      	str	r2, [r5, #0]
 8003350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003358:	2301      	movs	r3, #1
 800335a:	e0a3      	b.n	80034a4 <_printf_i+0x1f4>
 800335c:	6820      	ldr	r0, [r4, #0]
 800335e:	6829      	ldr	r1, [r5, #0]
 8003360:	0606      	lsls	r6, r0, #24
 8003362:	f101 0304 	add.w	r3, r1, #4
 8003366:	d50a      	bpl.n	800337e <_printf_i+0xce>
 8003368:	680e      	ldr	r6, [r1, #0]
 800336a:	602b      	str	r3, [r5, #0]
 800336c:	2e00      	cmp	r6, #0
 800336e:	da03      	bge.n	8003378 <_printf_i+0xc8>
 8003370:	232d      	movs	r3, #45	; 0x2d
 8003372:	4276      	negs	r6, r6
 8003374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003378:	485e      	ldr	r0, [pc, #376]	; (80034f4 <_printf_i+0x244>)
 800337a:	230a      	movs	r3, #10
 800337c:	e019      	b.n	80033b2 <_printf_i+0x102>
 800337e:	680e      	ldr	r6, [r1, #0]
 8003380:	602b      	str	r3, [r5, #0]
 8003382:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003386:	bf18      	it	ne
 8003388:	b236      	sxthne	r6, r6
 800338a:	e7ef      	b.n	800336c <_printf_i+0xbc>
 800338c:	682b      	ldr	r3, [r5, #0]
 800338e:	6820      	ldr	r0, [r4, #0]
 8003390:	1d19      	adds	r1, r3, #4
 8003392:	6029      	str	r1, [r5, #0]
 8003394:	0601      	lsls	r1, r0, #24
 8003396:	d501      	bpl.n	800339c <_printf_i+0xec>
 8003398:	681e      	ldr	r6, [r3, #0]
 800339a:	e002      	b.n	80033a2 <_printf_i+0xf2>
 800339c:	0646      	lsls	r6, r0, #25
 800339e:	d5fb      	bpl.n	8003398 <_printf_i+0xe8>
 80033a0:	881e      	ldrh	r6, [r3, #0]
 80033a2:	4854      	ldr	r0, [pc, #336]	; (80034f4 <_printf_i+0x244>)
 80033a4:	2f6f      	cmp	r7, #111	; 0x6f
 80033a6:	bf0c      	ite	eq
 80033a8:	2308      	moveq	r3, #8
 80033aa:	230a      	movne	r3, #10
 80033ac:	2100      	movs	r1, #0
 80033ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033b2:	6865      	ldr	r5, [r4, #4]
 80033b4:	60a5      	str	r5, [r4, #8]
 80033b6:	2d00      	cmp	r5, #0
 80033b8:	bfa2      	ittt	ge
 80033ba:	6821      	ldrge	r1, [r4, #0]
 80033bc:	f021 0104 	bicge.w	r1, r1, #4
 80033c0:	6021      	strge	r1, [r4, #0]
 80033c2:	b90e      	cbnz	r6, 80033c8 <_printf_i+0x118>
 80033c4:	2d00      	cmp	r5, #0
 80033c6:	d04d      	beq.n	8003464 <_printf_i+0x1b4>
 80033c8:	4615      	mov	r5, r2
 80033ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80033ce:	fb03 6711 	mls	r7, r3, r1, r6
 80033d2:	5dc7      	ldrb	r7, [r0, r7]
 80033d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033d8:	4637      	mov	r7, r6
 80033da:	42bb      	cmp	r3, r7
 80033dc:	460e      	mov	r6, r1
 80033de:	d9f4      	bls.n	80033ca <_printf_i+0x11a>
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d10b      	bne.n	80033fc <_printf_i+0x14c>
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	07de      	lsls	r6, r3, #31
 80033e8:	d508      	bpl.n	80033fc <_printf_i+0x14c>
 80033ea:	6923      	ldr	r3, [r4, #16]
 80033ec:	6861      	ldr	r1, [r4, #4]
 80033ee:	4299      	cmp	r1, r3
 80033f0:	bfde      	ittt	le
 80033f2:	2330      	movle	r3, #48	; 0x30
 80033f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033fc:	1b52      	subs	r2, r2, r5
 80033fe:	6122      	str	r2, [r4, #16]
 8003400:	f8cd a000 	str.w	sl, [sp]
 8003404:	464b      	mov	r3, r9
 8003406:	aa03      	add	r2, sp, #12
 8003408:	4621      	mov	r1, r4
 800340a:	4640      	mov	r0, r8
 800340c:	f7ff fee2 	bl	80031d4 <_printf_common>
 8003410:	3001      	adds	r0, #1
 8003412:	d14c      	bne.n	80034ae <_printf_i+0x1fe>
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	b004      	add	sp, #16
 800341a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800341e:	4835      	ldr	r0, [pc, #212]	; (80034f4 <_printf_i+0x244>)
 8003420:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003424:	6829      	ldr	r1, [r5, #0]
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	f851 6b04 	ldr.w	r6, [r1], #4
 800342c:	6029      	str	r1, [r5, #0]
 800342e:	061d      	lsls	r5, r3, #24
 8003430:	d514      	bpl.n	800345c <_printf_i+0x1ac>
 8003432:	07df      	lsls	r7, r3, #31
 8003434:	bf44      	itt	mi
 8003436:	f043 0320 	orrmi.w	r3, r3, #32
 800343a:	6023      	strmi	r3, [r4, #0]
 800343c:	b91e      	cbnz	r6, 8003446 <_printf_i+0x196>
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	f023 0320 	bic.w	r3, r3, #32
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	2310      	movs	r3, #16
 8003448:	e7b0      	b.n	80033ac <_printf_i+0xfc>
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	f043 0320 	orr.w	r3, r3, #32
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	2378      	movs	r3, #120	; 0x78
 8003454:	4828      	ldr	r0, [pc, #160]	; (80034f8 <_printf_i+0x248>)
 8003456:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800345a:	e7e3      	b.n	8003424 <_printf_i+0x174>
 800345c:	0659      	lsls	r1, r3, #25
 800345e:	bf48      	it	mi
 8003460:	b2b6      	uxthmi	r6, r6
 8003462:	e7e6      	b.n	8003432 <_printf_i+0x182>
 8003464:	4615      	mov	r5, r2
 8003466:	e7bb      	b.n	80033e0 <_printf_i+0x130>
 8003468:	682b      	ldr	r3, [r5, #0]
 800346a:	6826      	ldr	r6, [r4, #0]
 800346c:	6961      	ldr	r1, [r4, #20]
 800346e:	1d18      	adds	r0, r3, #4
 8003470:	6028      	str	r0, [r5, #0]
 8003472:	0635      	lsls	r5, r6, #24
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	d501      	bpl.n	800347c <_printf_i+0x1cc>
 8003478:	6019      	str	r1, [r3, #0]
 800347a:	e002      	b.n	8003482 <_printf_i+0x1d2>
 800347c:	0670      	lsls	r0, r6, #25
 800347e:	d5fb      	bpl.n	8003478 <_printf_i+0x1c8>
 8003480:	8019      	strh	r1, [r3, #0]
 8003482:	2300      	movs	r3, #0
 8003484:	6123      	str	r3, [r4, #16]
 8003486:	4615      	mov	r5, r2
 8003488:	e7ba      	b.n	8003400 <_printf_i+0x150>
 800348a:	682b      	ldr	r3, [r5, #0]
 800348c:	1d1a      	adds	r2, r3, #4
 800348e:	602a      	str	r2, [r5, #0]
 8003490:	681d      	ldr	r5, [r3, #0]
 8003492:	6862      	ldr	r2, [r4, #4]
 8003494:	2100      	movs	r1, #0
 8003496:	4628      	mov	r0, r5
 8003498:	f7fc fe9a 	bl	80001d0 <memchr>
 800349c:	b108      	cbz	r0, 80034a2 <_printf_i+0x1f2>
 800349e:	1b40      	subs	r0, r0, r5
 80034a0:	6060      	str	r0, [r4, #4]
 80034a2:	6863      	ldr	r3, [r4, #4]
 80034a4:	6123      	str	r3, [r4, #16]
 80034a6:	2300      	movs	r3, #0
 80034a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034ac:	e7a8      	b.n	8003400 <_printf_i+0x150>
 80034ae:	6923      	ldr	r3, [r4, #16]
 80034b0:	462a      	mov	r2, r5
 80034b2:	4649      	mov	r1, r9
 80034b4:	4640      	mov	r0, r8
 80034b6:	47d0      	blx	sl
 80034b8:	3001      	adds	r0, #1
 80034ba:	d0ab      	beq.n	8003414 <_printf_i+0x164>
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	079b      	lsls	r3, r3, #30
 80034c0:	d413      	bmi.n	80034ea <_printf_i+0x23a>
 80034c2:	68e0      	ldr	r0, [r4, #12]
 80034c4:	9b03      	ldr	r3, [sp, #12]
 80034c6:	4298      	cmp	r0, r3
 80034c8:	bfb8      	it	lt
 80034ca:	4618      	movlt	r0, r3
 80034cc:	e7a4      	b.n	8003418 <_printf_i+0x168>
 80034ce:	2301      	movs	r3, #1
 80034d0:	4632      	mov	r2, r6
 80034d2:	4649      	mov	r1, r9
 80034d4:	4640      	mov	r0, r8
 80034d6:	47d0      	blx	sl
 80034d8:	3001      	adds	r0, #1
 80034da:	d09b      	beq.n	8003414 <_printf_i+0x164>
 80034dc:	3501      	adds	r5, #1
 80034de:	68e3      	ldr	r3, [r4, #12]
 80034e0:	9903      	ldr	r1, [sp, #12]
 80034e2:	1a5b      	subs	r3, r3, r1
 80034e4:	42ab      	cmp	r3, r5
 80034e6:	dcf2      	bgt.n	80034ce <_printf_i+0x21e>
 80034e8:	e7eb      	b.n	80034c2 <_printf_i+0x212>
 80034ea:	2500      	movs	r5, #0
 80034ec:	f104 0619 	add.w	r6, r4, #25
 80034f0:	e7f5      	b.n	80034de <_printf_i+0x22e>
 80034f2:	bf00      	nop
 80034f4:	0800380d 	.word	0x0800380d
 80034f8:	0800381e 	.word	0x0800381e

080034fc <memcpy>:
 80034fc:	440a      	add	r2, r1
 80034fe:	4291      	cmp	r1, r2
 8003500:	f100 33ff 	add.w	r3, r0, #4294967295
 8003504:	d100      	bne.n	8003508 <memcpy+0xc>
 8003506:	4770      	bx	lr
 8003508:	b510      	push	{r4, lr}
 800350a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800350e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003512:	4291      	cmp	r1, r2
 8003514:	d1f9      	bne.n	800350a <memcpy+0xe>
 8003516:	bd10      	pop	{r4, pc}

08003518 <memmove>:
 8003518:	4288      	cmp	r0, r1
 800351a:	b510      	push	{r4, lr}
 800351c:	eb01 0402 	add.w	r4, r1, r2
 8003520:	d902      	bls.n	8003528 <memmove+0x10>
 8003522:	4284      	cmp	r4, r0
 8003524:	4623      	mov	r3, r4
 8003526:	d807      	bhi.n	8003538 <memmove+0x20>
 8003528:	1e43      	subs	r3, r0, #1
 800352a:	42a1      	cmp	r1, r4
 800352c:	d008      	beq.n	8003540 <memmove+0x28>
 800352e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003532:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003536:	e7f8      	b.n	800352a <memmove+0x12>
 8003538:	4402      	add	r2, r0
 800353a:	4601      	mov	r1, r0
 800353c:	428a      	cmp	r2, r1
 800353e:	d100      	bne.n	8003542 <memmove+0x2a>
 8003540:	bd10      	pop	{r4, pc}
 8003542:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003546:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800354a:	e7f7      	b.n	800353c <memmove+0x24>

0800354c <_free_r>:
 800354c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800354e:	2900      	cmp	r1, #0
 8003550:	d044      	beq.n	80035dc <_free_r+0x90>
 8003552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003556:	9001      	str	r0, [sp, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f1a1 0404 	sub.w	r4, r1, #4
 800355e:	bfb8      	it	lt
 8003560:	18e4      	addlt	r4, r4, r3
 8003562:	f000 f913 	bl	800378c <__malloc_lock>
 8003566:	4a1e      	ldr	r2, [pc, #120]	; (80035e0 <_free_r+0x94>)
 8003568:	9801      	ldr	r0, [sp, #4]
 800356a:	6813      	ldr	r3, [r2, #0]
 800356c:	b933      	cbnz	r3, 800357c <_free_r+0x30>
 800356e:	6063      	str	r3, [r4, #4]
 8003570:	6014      	str	r4, [r2, #0]
 8003572:	b003      	add	sp, #12
 8003574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003578:	f000 b90e 	b.w	8003798 <__malloc_unlock>
 800357c:	42a3      	cmp	r3, r4
 800357e:	d908      	bls.n	8003592 <_free_r+0x46>
 8003580:	6825      	ldr	r5, [r4, #0]
 8003582:	1961      	adds	r1, r4, r5
 8003584:	428b      	cmp	r3, r1
 8003586:	bf01      	itttt	eq
 8003588:	6819      	ldreq	r1, [r3, #0]
 800358a:	685b      	ldreq	r3, [r3, #4]
 800358c:	1949      	addeq	r1, r1, r5
 800358e:	6021      	streq	r1, [r4, #0]
 8003590:	e7ed      	b.n	800356e <_free_r+0x22>
 8003592:	461a      	mov	r2, r3
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b10b      	cbz	r3, 800359c <_free_r+0x50>
 8003598:	42a3      	cmp	r3, r4
 800359a:	d9fa      	bls.n	8003592 <_free_r+0x46>
 800359c:	6811      	ldr	r1, [r2, #0]
 800359e:	1855      	adds	r5, r2, r1
 80035a0:	42a5      	cmp	r5, r4
 80035a2:	d10b      	bne.n	80035bc <_free_r+0x70>
 80035a4:	6824      	ldr	r4, [r4, #0]
 80035a6:	4421      	add	r1, r4
 80035a8:	1854      	adds	r4, r2, r1
 80035aa:	42a3      	cmp	r3, r4
 80035ac:	6011      	str	r1, [r2, #0]
 80035ae:	d1e0      	bne.n	8003572 <_free_r+0x26>
 80035b0:	681c      	ldr	r4, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	6053      	str	r3, [r2, #4]
 80035b6:	4421      	add	r1, r4
 80035b8:	6011      	str	r1, [r2, #0]
 80035ba:	e7da      	b.n	8003572 <_free_r+0x26>
 80035bc:	d902      	bls.n	80035c4 <_free_r+0x78>
 80035be:	230c      	movs	r3, #12
 80035c0:	6003      	str	r3, [r0, #0]
 80035c2:	e7d6      	b.n	8003572 <_free_r+0x26>
 80035c4:	6825      	ldr	r5, [r4, #0]
 80035c6:	1961      	adds	r1, r4, r5
 80035c8:	428b      	cmp	r3, r1
 80035ca:	bf04      	itt	eq
 80035cc:	6819      	ldreq	r1, [r3, #0]
 80035ce:	685b      	ldreq	r3, [r3, #4]
 80035d0:	6063      	str	r3, [r4, #4]
 80035d2:	bf04      	itt	eq
 80035d4:	1949      	addeq	r1, r1, r5
 80035d6:	6021      	streq	r1, [r4, #0]
 80035d8:	6054      	str	r4, [r2, #4]
 80035da:	e7ca      	b.n	8003572 <_free_r+0x26>
 80035dc:	b003      	add	sp, #12
 80035de:	bd30      	pop	{r4, r5, pc}
 80035e0:	2000019c 	.word	0x2000019c

080035e4 <sbrk_aligned>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	4e0e      	ldr	r6, [pc, #56]	; (8003620 <sbrk_aligned+0x3c>)
 80035e8:	460c      	mov	r4, r1
 80035ea:	6831      	ldr	r1, [r6, #0]
 80035ec:	4605      	mov	r5, r0
 80035ee:	b911      	cbnz	r1, 80035f6 <sbrk_aligned+0x12>
 80035f0:	f000 f8bc 	bl	800376c <_sbrk_r>
 80035f4:	6030      	str	r0, [r6, #0]
 80035f6:	4621      	mov	r1, r4
 80035f8:	4628      	mov	r0, r5
 80035fa:	f000 f8b7 	bl	800376c <_sbrk_r>
 80035fe:	1c43      	adds	r3, r0, #1
 8003600:	d00a      	beq.n	8003618 <sbrk_aligned+0x34>
 8003602:	1cc4      	adds	r4, r0, #3
 8003604:	f024 0403 	bic.w	r4, r4, #3
 8003608:	42a0      	cmp	r0, r4
 800360a:	d007      	beq.n	800361c <sbrk_aligned+0x38>
 800360c:	1a21      	subs	r1, r4, r0
 800360e:	4628      	mov	r0, r5
 8003610:	f000 f8ac 	bl	800376c <_sbrk_r>
 8003614:	3001      	adds	r0, #1
 8003616:	d101      	bne.n	800361c <sbrk_aligned+0x38>
 8003618:	f04f 34ff 	mov.w	r4, #4294967295
 800361c:	4620      	mov	r0, r4
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	200001a0 	.word	0x200001a0

08003624 <_malloc_r>:
 8003624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003628:	1ccd      	adds	r5, r1, #3
 800362a:	f025 0503 	bic.w	r5, r5, #3
 800362e:	3508      	adds	r5, #8
 8003630:	2d0c      	cmp	r5, #12
 8003632:	bf38      	it	cc
 8003634:	250c      	movcc	r5, #12
 8003636:	2d00      	cmp	r5, #0
 8003638:	4607      	mov	r7, r0
 800363a:	db01      	blt.n	8003640 <_malloc_r+0x1c>
 800363c:	42a9      	cmp	r1, r5
 800363e:	d905      	bls.n	800364c <_malloc_r+0x28>
 8003640:	230c      	movs	r3, #12
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	2600      	movs	r6, #0
 8003646:	4630      	mov	r0, r6
 8003648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800364c:	4e2e      	ldr	r6, [pc, #184]	; (8003708 <_malloc_r+0xe4>)
 800364e:	f000 f89d 	bl	800378c <__malloc_lock>
 8003652:	6833      	ldr	r3, [r6, #0]
 8003654:	461c      	mov	r4, r3
 8003656:	bb34      	cbnz	r4, 80036a6 <_malloc_r+0x82>
 8003658:	4629      	mov	r1, r5
 800365a:	4638      	mov	r0, r7
 800365c:	f7ff ffc2 	bl	80035e4 <sbrk_aligned>
 8003660:	1c43      	adds	r3, r0, #1
 8003662:	4604      	mov	r4, r0
 8003664:	d14d      	bne.n	8003702 <_malloc_r+0xde>
 8003666:	6834      	ldr	r4, [r6, #0]
 8003668:	4626      	mov	r6, r4
 800366a:	2e00      	cmp	r6, #0
 800366c:	d140      	bne.n	80036f0 <_malloc_r+0xcc>
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	4631      	mov	r1, r6
 8003672:	4638      	mov	r0, r7
 8003674:	eb04 0803 	add.w	r8, r4, r3
 8003678:	f000 f878 	bl	800376c <_sbrk_r>
 800367c:	4580      	cmp	r8, r0
 800367e:	d13a      	bne.n	80036f6 <_malloc_r+0xd2>
 8003680:	6821      	ldr	r1, [r4, #0]
 8003682:	3503      	adds	r5, #3
 8003684:	1a6d      	subs	r5, r5, r1
 8003686:	f025 0503 	bic.w	r5, r5, #3
 800368a:	3508      	adds	r5, #8
 800368c:	2d0c      	cmp	r5, #12
 800368e:	bf38      	it	cc
 8003690:	250c      	movcc	r5, #12
 8003692:	4629      	mov	r1, r5
 8003694:	4638      	mov	r0, r7
 8003696:	f7ff ffa5 	bl	80035e4 <sbrk_aligned>
 800369a:	3001      	adds	r0, #1
 800369c:	d02b      	beq.n	80036f6 <_malloc_r+0xd2>
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	442b      	add	r3, r5
 80036a2:	6023      	str	r3, [r4, #0]
 80036a4:	e00e      	b.n	80036c4 <_malloc_r+0xa0>
 80036a6:	6822      	ldr	r2, [r4, #0]
 80036a8:	1b52      	subs	r2, r2, r5
 80036aa:	d41e      	bmi.n	80036ea <_malloc_r+0xc6>
 80036ac:	2a0b      	cmp	r2, #11
 80036ae:	d916      	bls.n	80036de <_malloc_r+0xba>
 80036b0:	1961      	adds	r1, r4, r5
 80036b2:	42a3      	cmp	r3, r4
 80036b4:	6025      	str	r5, [r4, #0]
 80036b6:	bf18      	it	ne
 80036b8:	6059      	strne	r1, [r3, #4]
 80036ba:	6863      	ldr	r3, [r4, #4]
 80036bc:	bf08      	it	eq
 80036be:	6031      	streq	r1, [r6, #0]
 80036c0:	5162      	str	r2, [r4, r5]
 80036c2:	604b      	str	r3, [r1, #4]
 80036c4:	4638      	mov	r0, r7
 80036c6:	f104 060b 	add.w	r6, r4, #11
 80036ca:	f000 f865 	bl	8003798 <__malloc_unlock>
 80036ce:	f026 0607 	bic.w	r6, r6, #7
 80036d2:	1d23      	adds	r3, r4, #4
 80036d4:	1af2      	subs	r2, r6, r3
 80036d6:	d0b6      	beq.n	8003646 <_malloc_r+0x22>
 80036d8:	1b9b      	subs	r3, r3, r6
 80036da:	50a3      	str	r3, [r4, r2]
 80036dc:	e7b3      	b.n	8003646 <_malloc_r+0x22>
 80036de:	6862      	ldr	r2, [r4, #4]
 80036e0:	42a3      	cmp	r3, r4
 80036e2:	bf0c      	ite	eq
 80036e4:	6032      	streq	r2, [r6, #0]
 80036e6:	605a      	strne	r2, [r3, #4]
 80036e8:	e7ec      	b.n	80036c4 <_malloc_r+0xa0>
 80036ea:	4623      	mov	r3, r4
 80036ec:	6864      	ldr	r4, [r4, #4]
 80036ee:	e7b2      	b.n	8003656 <_malloc_r+0x32>
 80036f0:	4634      	mov	r4, r6
 80036f2:	6876      	ldr	r6, [r6, #4]
 80036f4:	e7b9      	b.n	800366a <_malloc_r+0x46>
 80036f6:	230c      	movs	r3, #12
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	4638      	mov	r0, r7
 80036fc:	f000 f84c 	bl	8003798 <__malloc_unlock>
 8003700:	e7a1      	b.n	8003646 <_malloc_r+0x22>
 8003702:	6025      	str	r5, [r4, #0]
 8003704:	e7de      	b.n	80036c4 <_malloc_r+0xa0>
 8003706:	bf00      	nop
 8003708:	2000019c 	.word	0x2000019c

0800370c <_realloc_r>:
 800370c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003710:	4680      	mov	r8, r0
 8003712:	4614      	mov	r4, r2
 8003714:	460e      	mov	r6, r1
 8003716:	b921      	cbnz	r1, 8003722 <_realloc_r+0x16>
 8003718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800371c:	4611      	mov	r1, r2
 800371e:	f7ff bf81 	b.w	8003624 <_malloc_r>
 8003722:	b92a      	cbnz	r2, 8003730 <_realloc_r+0x24>
 8003724:	f7ff ff12 	bl	800354c <_free_r>
 8003728:	4625      	mov	r5, r4
 800372a:	4628      	mov	r0, r5
 800372c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003730:	f000 f838 	bl	80037a4 <_malloc_usable_size_r>
 8003734:	4284      	cmp	r4, r0
 8003736:	4607      	mov	r7, r0
 8003738:	d802      	bhi.n	8003740 <_realloc_r+0x34>
 800373a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800373e:	d812      	bhi.n	8003766 <_realloc_r+0x5a>
 8003740:	4621      	mov	r1, r4
 8003742:	4640      	mov	r0, r8
 8003744:	f7ff ff6e 	bl	8003624 <_malloc_r>
 8003748:	4605      	mov	r5, r0
 800374a:	2800      	cmp	r0, #0
 800374c:	d0ed      	beq.n	800372a <_realloc_r+0x1e>
 800374e:	42bc      	cmp	r4, r7
 8003750:	4622      	mov	r2, r4
 8003752:	4631      	mov	r1, r6
 8003754:	bf28      	it	cs
 8003756:	463a      	movcs	r2, r7
 8003758:	f7ff fed0 	bl	80034fc <memcpy>
 800375c:	4631      	mov	r1, r6
 800375e:	4640      	mov	r0, r8
 8003760:	f7ff fef4 	bl	800354c <_free_r>
 8003764:	e7e1      	b.n	800372a <_realloc_r+0x1e>
 8003766:	4635      	mov	r5, r6
 8003768:	e7df      	b.n	800372a <_realloc_r+0x1e>
	...

0800376c <_sbrk_r>:
 800376c:	b538      	push	{r3, r4, r5, lr}
 800376e:	4d06      	ldr	r5, [pc, #24]	; (8003788 <_sbrk_r+0x1c>)
 8003770:	2300      	movs	r3, #0
 8003772:	4604      	mov	r4, r0
 8003774:	4608      	mov	r0, r1
 8003776:	602b      	str	r3, [r5, #0]
 8003778:	f7fd fafe 	bl	8000d78 <_sbrk>
 800377c:	1c43      	adds	r3, r0, #1
 800377e:	d102      	bne.n	8003786 <_sbrk_r+0x1a>
 8003780:	682b      	ldr	r3, [r5, #0]
 8003782:	b103      	cbz	r3, 8003786 <_sbrk_r+0x1a>
 8003784:	6023      	str	r3, [r4, #0]
 8003786:	bd38      	pop	{r3, r4, r5, pc}
 8003788:	200001a4 	.word	0x200001a4

0800378c <__malloc_lock>:
 800378c:	4801      	ldr	r0, [pc, #4]	; (8003794 <__malloc_lock+0x8>)
 800378e:	f000 b811 	b.w	80037b4 <__retarget_lock_acquire_recursive>
 8003792:	bf00      	nop
 8003794:	200001a8 	.word	0x200001a8

08003798 <__malloc_unlock>:
 8003798:	4801      	ldr	r0, [pc, #4]	; (80037a0 <__malloc_unlock+0x8>)
 800379a:	f000 b80c 	b.w	80037b6 <__retarget_lock_release_recursive>
 800379e:	bf00      	nop
 80037a0:	200001a8 	.word	0x200001a8

080037a4 <_malloc_usable_size_r>:
 80037a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037a8:	1f18      	subs	r0, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bfbc      	itt	lt
 80037ae:	580b      	ldrlt	r3, [r1, r0]
 80037b0:	18c0      	addlt	r0, r0, r3
 80037b2:	4770      	bx	lr

080037b4 <__retarget_lock_acquire_recursive>:
 80037b4:	4770      	bx	lr

080037b6 <__retarget_lock_release_recursive>:
 80037b6:	4770      	bx	lr

080037b8 <_init>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	bf00      	nop
 80037bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037be:	bc08      	pop	{r3}
 80037c0:	469e      	mov	lr, r3
 80037c2:	4770      	bx	lr

080037c4 <_fini>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	bf00      	nop
 80037c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ca:	bc08      	pop	{r3}
 80037cc:	469e      	mov	lr, r3
 80037ce:	4770      	bx	lr
